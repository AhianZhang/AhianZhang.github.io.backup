<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[RSocket 介绍]]></title>
      <url>/2019/12/10/rsocket-intro/</url>
      <content type="html"><![CDATA[<p>RSocket 是一个新的通信协议， Facebook、Netfi、Pivotal、vlingo 等公司都有参与研发，它是一个位于传输层的新协议。在反应式编程中有两个瓶颈，一个是关系型数据库性能，一个是网络传输性能，对于数据库已经有<a href="https://r2dbc.io/" target="_blank" rel="noopener">r2dbc</a>开发，而网络问题则由 RScoket 解决，有人说 VaughnVernon 去 vlingo 做 RSocket 研究是为了解决领域驱动设计中上下文映射的问题（未求证）</p>
<h2 id="为什么需要一个新协议"><a href="#为什么需要一个新协议" class="headerlink" title="为什么需要一个新协议"></a>为什么需要一个新协议</h2><p>按<a href="http://rsocket.io/docs/FAQ" target="_blank" rel="noopener">官方的解释</a>翻译以及个人理解：</p>
<ul>
<li>为了支持除了目前最常用的 Request/Respones 以外，像流式响应（类似于 Flink 的流处理）以及推送</li>
<li>二进制协议，使用字节流传输，支持单连接的多路复用</li>
<li>会话重连，这在移动端上很有用</li>
<li>需要有一个应用层的协议来支持自由切换像 WebSockets 和 Aeron 这样的传输层协议</li>
</ul>
<h2 id="支持的四种通讯模型"><a href="#支持的四种通讯模型" class="headerlink" title="支持的四种通讯模型"></a>支持的四种通讯模型</h2><table>
<thead>
<tr>
<th>名称</th>
<th>用途</th>
</tr>
</thead>
<tbody>
<tr>
<td>Request/Response</td>
<td>rpc</td>
</tr>
<tr>
<td>Request/Stream</td>
<td>pub/sub</td>
</tr>
<tr>
<td>Fire-and-Forget</td>
<td>logging, metrics</td>
</tr>
<tr>
<td>channel</td>
<td>mobile &amp; IoT &lt;-&gt; Server 全双工通道</td>
</tr>
</tbody>
</table>
<h2 id="Reactive"><a href="#Reactive" class="headerlink" title="Reactive"></a>Reactive</h2><p>RSocket 实现了 Reactive 编程模型，它有以下特点</p>
<ul>
<li>全异步无阻塞</li>
<li>背压</li>
<li>并发模型 </li>
</ul>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://www.infoq.cn/article/2018%2F10%2Frsocket-facebook" target="_blank" rel="noopener">https://www.infoq.cn/article/2018%2F10%2Frsocket-facebook</a></p>
<p><a href="https://www.ibm.com/developerworks/cn/java/j-using-rsocket-for-reactive-data-transfer/index.html" target="_blank" rel="noopener">https://www.ibm.com/developerworks/cn/java/j-using-rsocket-for-reactive-data-transfer/index.html</a></p>
<p><a href="https://en.wikipedia.org/wiki/RSocket" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/RSocket</a></p>
<p><a href="https://dev.to/petros0/getting-started-with-rsocket-in-springboot-5889" target="_blank" rel="noopener">https://dev.to/petros0/getting-started-with-rsocket-in-springboot-5889</a></p>
<p><a href="http://rsocket.io/docs/FAQ" target="_blank" rel="noopener">http://rsocket.io/docs/FAQ</a></p>
<p>## </p>
]]></content>
      
        <categories>
            
            <category> 协议 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> rsocket </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[面向对象的理解]]></title>
      <url>/2019/10/08/object-oriented-mind/</url>
      <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>说起面向对象的特征，大多数人肯会不加思索的答封装、继承、多态，可能还有抽象。最近在学 DDD 的时候，感觉它更加合理的运用了设计模式和面向对象的思想去解决复杂的业务场景，还有是阅读源码的时候也会看到大量的设计模式，所以说 Design Pattern 和 Object-Oriented 熟练的话会提升很大的代码质量（编程范式后续还会讲函数式和响应式）。</p>
<p>下面只说自己的体会和见解，如有异议欢迎留言。</p>
<h1 id="四大特征"><a href="#四大特征" class="headerlink" title="四大特征"></a>四大特征</h1><h2 id="抽象"><a href="#抽象" class="headerlink" title="抽象"></a>抽象</h2><p>抽象，隐藏与上下文无关的信息，抽象的目的是为了简单，从宏观的角度去处理问题，举例：你开车去上班，但你只要知道车能带你到公司而不用在乎车内部的复杂零件是如何做工的，此时车就抽象成为一个整体。</p>
<h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p>将功能相近的代码放到同一个类中，这样做的好处是能够进行解耦让不同的代码各司其职，具体细分为 <strong>Information hiding</strong> 和 <strong>Implementation hiding</strong> </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 通过 访问修饰符 讲一些细节保留在当前类中，而一些相对外开放的则使用 public 进行修饰</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InformationHiding</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">//Restrict direct access to inward data</span></span><br><span class="line">    <span class="keyword">private</span> ArrayList items = <span class="keyword">new</span> ArrayList();</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//Provide a way to access data - internal logic can safely be changed in future</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList <span class="title">getItems</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> items;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ImplemenatationHiding</span> </span>&#123;</span><br><span class="line">    <span class="function">Integer <span class="title">sumAllItems</span><span class="params">(ArrayList items)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InformationHiding</span> <span class="keyword">implements</span> <span class="title">ImplemenatationHiding</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">//Restrict direct access to inward data</span></span><br><span class="line">    <span class="keyword">private</span> ArrayList items = <span class="keyword">new</span> ArrayList();</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//Provide a way to access data - internal logic can safely be changed in future</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList <span class="title">getItems</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> items;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">sumAllItems</span><span class="params">(ArrayList items)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//Here you may do N number of things in any sequence</span></span><br><span class="line">        <span class="comment">//Which you do not want your clients to know</span></span><br><span class="line">        <span class="comment">//You can change the sequence or even whole logic</span></span><br><span class="line">        <span class="comment">//without affecting the client</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>继承就是子类继承父类并可以父类或者重写父类的方法，这样做能让基础功能代码复用，但是现在有一种说法是组合优先于继承，因为继承也有自身的局限性，容易把代码写死。</p>
<h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>这里的个人理解就是一段代码写在不同的业务场景下有不同的功能，通过重载或者重写，其正规的说法是：</p>
<blockquote>
<p>In java language, polymorphism is essentially considered into two versions:</p>
<ul>
<li>Compile time polymorphism (static binding or <strong>method overloading</strong>)</li>
<li>Runtime polymorphism (dynamic binding or <strong>method overriding</strong>)</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 架构 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 面向对象 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[企业平台技术框架]]></title>
      <url>/2019/09/27/architecture-framework/</url>
      <content type="html"><![CDATA[<p>最近看了阿里的 TMF2.0 交易平台的介绍，觉得很有兴趣，所以展开学习，因为认知以及自身水平，对于技术平台框架理解有限，如有不当之处还望斧正。</p>
<p>在说 TMF2.0 之前先来说说 TOGAF。</p>
<p><a href="https://www.opengroup.org/togaf" target="_blank" rel="noopener">TOGAF</a> 全称 The Open Group Architecture Framework，及开放组织结构框架，引用 WiKi 上的介绍：</p>
<blockquote>
<p><strong>开放组体系结构框架</strong>（英语：The Open Group Architecture Framework，缩写：<strong>TOGAF</strong>）是一个<a href="https://zh.wikipedia.org/wiki/企业架构" target="_blank" rel="noopener">企业架构</a>框架，它提供了一种设计，规划，实施和管理企业信息技术架构的方法<a href="https://zh.wikipedia.org/wiki/开放组体系结构框架#cite_note-2" target="_blank" rel="noopener">[2]</a>。TOGAF是一种高层设计方法。 它通常被建模为四个级别：业务，应用程序，数据，和技术。 它在很大程度上依赖于模块化，标准化以及已有的，经过验证的技术和产品。</p>
</blockquote>
<p>其实个人认为这种框架只不过是给企业一个参考，怎么落地还要结合自身所处的环境，一口吃不成一个胖子，好比技术创业，首先要有创意，其次是写代码，然后看能不能盈利，如果一直亏损那么所谓的架构也就无从谈起了。</p>
<p>对于阿里系的 TMF2.0 它的诞生是为了解决问题的，当然新技术或者方案的出现都是为了解决现有问题，不然有谁愿意做无用功。 TMF2.0站在了一个全局的视角上，着重解决需求结构化，业务配置化以及 SRE，基于业务场景划分职责，使代码逻辑更清晰。这套技术平台上线后能大大的缩短开发周期，这对当前快变的市场来说是非常受益的。</p>
<p>参考文章：</p>
<p><a href="https://zhuanlan.zhihu.com/p/32253578" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/32253578</a></p>
<p><a href="http://blog.itpub.net/31562044/viewspace-2639289/" target="_blank" rel="noopener">http://blog.itpub.net/31562044/viewspace-2639289/</a></p>
<p><a href="http://blog.itpub.net/31562044/viewspace-2639289/" target="_blank" rel="noopener">http://blog.itpub.net/31562044/viewspace-2639289/</a>    </p>
]]></content>
      
        <categories>
            
            <category> 架构 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 平台架构 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[对创业的思考]]></title>
      <url>/2019/09/27/summary13/</url>
      <content type="html"><![CDATA[<p>在我还在读大学的时候就创业的想法，所以平时也会对创业的方面的内容更关注一些，加上平时的思考与感悟整理出来。</p>
<h1 id="活着"><a href="#活着" class="headerlink" title="活着"></a>活着</h1><p>对于创业可能常听到“十个创业九个死”之类的话，对于一个初创公司来说没有比活下来更重要了，作为经营者要考虑成本，说利益至上可能显得又些不道德，但是现实就是如此。</p>
<h1 id="发展"><a href="#发展" class="headerlink" title="发展"></a>发展</h1><p><strong>公司应该在保证核心目标不变的前提下做到快变</strong>，这里的快变是指跟随市场变化</p>
<p><strong>拒绝跟风</strong>跟风在互联网很常见，一个 APP 出了一个新功能，投入市场后吸引力很多用户，其他公司看到了利益，也会要求自己的产品加上相同的功能。但这样一旦成为市场常态那么就不会再吸引用户了。</p>
<h1 id="竞争"><a href="#竞争" class="headerlink" title="竞争"></a>竞争</h1><p>企业的核心竞争力在于有一套不可复制的模式，这也是企业能够活下去的根本，如果不做创新那还叫什么创业呢。</p>
<h1 id="文化"><a href="#文化" class="headerlink" title="文化"></a>文化</h1><p>企业文化可以说相当重要，以前总觉得踏踏实实做事就行，但接触的多了才发现，没有思想你一文不值，没有思想就如同一台机器，一台机器可以随意的替换和批量生产。对于企业来说，保证对公司的初衷不变的前提下融合成员的思想，在创业上应该保持“道不同，不相为谋”的心态。当然好的企业文化都是沉淀下来的，所以说活着高于一切。对于人才的培养以及忠诚度我把它归为文化里，没有什么死的标准指导，因时制宜才是最好的。</p>
]]></content>
      
        <categories>
            
            <category> 总结 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 创业 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[知难行易]]></title>
      <url>/2019/09/22/summary12/</url>
      <content type="html"><![CDATA[<blockquote>
<p>人们总是用自己的认知限制，来否认事物的存在</p>
</blockquote>
<p>”认知提升“应该是近几年频繁会听到的短语。一个人的认知决定了这个人站在什么高度去看待问题。最近接触了一些人一些事感觉确实如此。</p>
<p>今年的世界人工智能大会开幕式马云和马斯克的谈话，个人更喜欢马斯克的想法，不局限于当下，敢作敢为。人类早晚都会在宇宙中生存，我们所做的只是促进或者减缓时代的到临，却无法阻止。</p>
<p>在软件工程中，有面向对象的思维，有各种设计模式，这是最基础的然而也是大多数人忽略的，问什么是面向对象，总是答封装继承和多态，继续问面向对象的设计原则，此时估计会卡掉一大半。工作了一年有余，接触的东西多了，才逐渐明白新的技术或者框架并不是应该追逐的东西，最基础的才是最难的，像打地基，怎么打才能让其稳定负重，如果连设计模式都不清楚的话很难写出优秀的代码。</p>
<p>知难，每个人都是懒惰的，都有惯性思维，但恰恰如此，只在自己熟悉的领域做事情，用不了多久就会废掉，这种人不愿改变自己的观念，也常常自欺欺人，在如今应该会被称为“社畜”吧。</p>
<p>“信则有，不信则无”，它一直存在于那里，只是愿不愿意承认。</p>
<p>行易，如果你的认知能够作为实践的理论基础，那么做不做只是选择问题。</p>
<p>知行合一，是阳明学说的核心思想，如果说知难行易，那么知行合一则是更上一次的思想，有难便有易，万物总是存在对立面，如果能使二者达到某种平衡，那么其带来的影响必然是巨大的。</p>
<p>平时多思考、多和有见识的人交流，是提升自己认知最好的方式。</p>
]]></content>
      
        <categories>
            
            <category> 总结 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 生活总结 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[一年工作经验总结]]></title>
      <url>/2019/09/03/summary11/</url>
      <content type="html"><![CDATA[<p>从 17 年开始到现在断断续续的写了一百多篇博客，每次看到以前写的博客都很感慨，浏览之前的博客其实能感受到这几年的变化与成长，但最近想了一下决定删除一些文章，从技术的关注向深度转变，方向可以从分类中看到，获取短期内不会再发生什么变化了，这是一次重要的选择，想要得到就要先放弃。</p>
<h1 id="工作内容"><a href="#工作内容" class="headerlink" title="工作内容"></a>工作内容</h1><h2 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h2><ul>
<li>重构搜索系统</li>
<li>设计并编写微服务环境下统一用户管理系统</li>
<li>代码规范的强制实施</li>
<li>日志监控报警</li>
<li>会刷 leetcode 算法题了</li>
</ul>
<h2 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h2><ul>
<li>技术本身并没有价值</li>
<li>认知升级</li>
<li>把一件事做简单，把简单事做极致</li>
<li>领域驱动设计</li>
<li>二八原则</li>
</ul>
<h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><ul>
<li>终于有成品了，之前就像总像蜻蜓点水一样，觉得什么都会，但没有实战经验。</li>
<li>对 Spring IoC 和 AOP 有了更深的理解</li>
<li>对代码的质量有了更严苛的要求</li>
<li>认识到些单元测试的重要性</li>
<li>能用自动化的就不要手工操作</li>
<li>成本和投入产出比</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 总结 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 工作总结 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[我与领域驱动之缘]]></title>
      <url>/2019/07/30/ddd-01/</url>
      <content type="html"><![CDATA[<h1 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h1><p>正式接触到领域驱动还是耗子叔在易观峰会上的演讲，当时听的一知半解，现在回头来看一看真的很棒。</p>
<p><img src="http://image.younge.group/WechatIMG23.jpeg" alt></p>
<h1 id="深入"><a href="#深入" class="headerlink" title="深入"></a>深入</h1><p>领域驱动设计适用于复杂的业务系统，但对于那些简单的使用 DDD 反而会增加复杂度。</p>
<p>最近在读 Vaughn Vernon 《实现领域驱动设计》以及张逸写的领域驱动设计战略篇和战术篇，</p>
<p>收益良多。</p>
]]></content>
      
        <categories>
            
            <category> DDD </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 概述 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[TDD 中使用的工具]]></title>
      <url>/2019/07/30/test-tool/</url>
      <content type="html"><![CDATA[<h3 id="Junit"><a href="#Junit" class="headerlink" title="Junit"></a>Junit</h3><p>常用单元测试工具</p>
<h3 id="MockMvc"><a href="#MockMvc" class="headerlink" title="MockMvc"></a>MockMvc</h3><p>Spring 提供的模拟 Controller 接口调用的工具</p>
<h3 id="Mocktio"><a href="#Mocktio" class="headerlink" title="Mocktio"></a>Mocktio</h3><p>能够提供 Mock 方法</p>
<h3 id="Cucumber"><a href="#Cucumber" class="headerlink" title="Cucumber"></a>Cucumber</h3><p>行为驱动开发，以用户故事为核心，算是 TDD 的升级版，能够结合其他工具生成报表</p>
]]></content>
      
        <categories>
            
            <category> TDD </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 测试工具 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[tf-idf 算法]]></title>
      <url>/2019/07/03/tf-idf/</url>
      <content type="html"><![CDATA[<p>tf-idf (term frequence-inverse document frequence) 词频-逆文档频率，是搜索常用的一个权重相关算法，其作用是评估一个 document 在一整个 document list 中的重要程度，下面分开来讲。</p>
<h2 id="term-frequence"><a href="#term-frequence" class="headerlink" title="term frequence"></a>term frequence</h2><p>tf 的意思就是一个词语在一个文件中出现的次数，对于一篇文章， tf 算法会将这篇文章进行分词并统计出现次数。这个词在这篇文章中出现的次数越多则说明越不重要，权重则越低。</p>
<p>其公式如下：</p>
<p>$$词频(tf_t,d)=\frac{单词在文档中出现的次数}{文档的总次数}$$</p>
<h2 id="inverse-document-frequence"><a href="#inverse-document-frequence" class="headerlink" title="inverse document frequence"></a>inverse document frequence</h2><p>先说文档频率(df)，表示文档集中包含某个词的所有文档数目。但是通常这个数目会很大，对此可以使用逆文档将其映射成小的取值范围，逆文档频率公式如下：</p>
<p>$$逆文档频率(idf_t)=log(\frac{文档集总数}{包含某个词的文档数})=log(\frac{N}{df_t+1})$$</p>
<h1 id="tf-idf"><a href="#tf-idf" class="headerlink" title="tf-idf"></a>tf-idf</h1><p>公式如下:</p>
<p>$$词频-逆文档频率(tf-idf)= 词频(tf) \times 逆文档频率(idf)$$</p>
<h1 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TfIdf</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 词频</span></span><br><span class="line"><span class="comment">     * 此数值越大则代表这个 term 在当前文档中越重要</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> doc</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> term</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">double</span> <span class="title">tf</span><span class="params">(List&lt;String&gt; doc, String term)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> termFrequency = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (String str : doc) &#123;</span><br><span class="line">            <span class="keyword">if</span> (str.equalsIgnoreCase(term)) &#123;</span><br><span class="line">                termFrequency++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> termFrequency / doc.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文档频率</span></span><br><span class="line"><span class="comment">     * 此值会越高越说明不重要</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> docs</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> term</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 存在 term 的文档数目</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">df</span><span class="params">(List&lt;List&lt;String&gt;&gt; docs, String term)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (term != <span class="keyword">null</span> &amp;&amp; !<span class="string">""</span>.equals(term)) &#123;</span><br><span class="line">            <span class="keyword">for</span> (List&lt;String&gt; doc : docs) &#123;</span><br><span class="line">                <span class="keyword">for</span> (String word : doc) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (term.equalsIgnoreCase(word)) &#123;</span><br><span class="line">                        n++;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"term 不能为 null 或者空字符串"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 逆文档频率</span></span><br><span class="line"><span class="comment">     * 此值越小则说明当前 term 越不重要</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> docs</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> term</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">double</span> <span class="title">idf</span><span class="params">(List&lt;List&lt;String&gt;&gt; docs, String term)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Math.log(docs.size() / df(docs, term) + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">double</span> <span class="title">tfIdf</span><span class="params">(List&lt;String&gt; doc, List&lt;List&lt;String&gt;&gt; docs, String term)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tf(doc, term) * idf(docs, term);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; doc1 = Arrays.asList(<span class="string">"北京"</span>, <span class="string">"上海"</span>, <span class="string">"杭州"</span>);</span><br><span class="line">        List&lt;String&gt; doc2 = Arrays.asList(<span class="string">"北京"</span>, <span class="string">"深圳"</span>, <span class="string">"南京"</span>);</span><br><span class="line">        List&lt;String&gt; doc3 = Arrays.asList(<span class="string">"南京"</span>, <span class="string">"北京"</span>, <span class="string">"深圳"</span>);</span><br><span class="line">        List&lt;String&gt; doc4 = Arrays.asList(<span class="string">"上海"</span>, <span class="string">"广州"</span>, <span class="string">"云南"</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;List&lt;String&gt;&gt; documents = Arrays.asList(doc1, doc2, doc3, doc4);</span><br><span class="line"></span><br><span class="line">        TfIdf tfIdf = <span class="keyword">new</span> TfIdf();</span><br><span class="line">        System.out.println(<span class="string">"【北京】在 doc1 中的词频："</span> + tfIdf.tf(doc1, <span class="string">"北京"</span>));</span><br><span class="line">        System.out.println(<span class="string">"【北京】在 doc4 中的词频："</span> + tfIdf.tf(doc4, <span class="string">"北京"</span>));</span><br><span class="line">        System.out.println(<span class="string">"【北京】在 文档集 中的词频："</span> + tfIdf.df(documents, <span class="string">"北京"</span>));</span><br><span class="line">        System.out.println(<span class="string">"【北京】的 if-idf 算法："</span> + tfIdf.tfIdf(doc2, documents, <span class="string">"北京"</span>));</span><br><span class="line">        System.out.println(<span class="string">"【深圳】的 if-idf 算法："</span> + tfIdf.tfIdf(doc2, documents, <span class="string">"深圳"</span>));</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 【北京】在 doc1 中的词频：0.3333333333333333</span></span><br><span class="line"><span class="comment">         * 【北京】在 doc4 中的词频：0.0</span></span><br><span class="line"><span class="comment">         * 【北京】在 文档集 中的词频：3</span></span><br><span class="line"><span class="comment">         * 【北京】的 if-idf 算法：0.23104906018664842</span></span><br><span class="line"><span class="comment">         * 【深圳】的 if-idf 算法：0.3662040962227032</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>《从 Lucene 到 Elasticsearch 全文检索实战》</p>
]]></content>
      
        <categories>
            
            <category> 搜索 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[gitlab 添加代码规范检测]]></title>
      <url>/2019/06/19/code-style-check-ali-p3c/</url>
      <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>gitlab 10.5.X + gitlab + ali p3c.pmd</p>
<p>好的代码能让人赏心悦目，方便 CodeReview 进行，为此，必须强制性的将代码规范起来。</p>
<h1 id="如何做"><a href="#如何做" class="headerlink" title="如何做"></a>如何做</h1><h2 id="git-custom-hooks"><a href="#git-custom-hooks" class="headerlink" title="git custom hooks"></a>git custom hooks</h2><h3 id="client-hooks"><a href="#client-hooks" class="headerlink" title="client hooks"></a>client hooks</h3><p>客户端钩子是存在本地的，按项目去配，这样能达到目的，但是起不到强制约束的效果，而且一个一个配很麻烦</p>
<h3 id="server-hooks"><a href="#server-hooks" class="headerlink" title="server hooks"></a>server hooks</h3><p>服务器端的钩子，每个项目中的 git hooks 全都是软连接到 gitlab  上的一个位置，默认是在</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/opt/gitlab/embedded/service/gitlab-shell/hooks</span><br></pre></td></tr></table></figure>
<p>这个 hooks 文件夹内包括三个文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── post-receive</span><br><span class="line">├── pre-receive</span><br><span class="line">└── update</span><br></pre></td></tr></table></figure>
<ul>
<li>pre-receive 接收客户端推送的代码，这个脚本的功能是最后只有 exit 0 时才代表接收，所有非 0 的推送都会被拒绝</li>
<li>update 可以多分支的去检测，即一段代码推送到多个分支，每个分支更新代码前都会执行一次这个脚本</li>
<li>post-receive 这个脚本是最后执行的，主要用来记录信息及通知用，不能中断推送流程</li>
</ul>
<p>按实际需求，使用 pre-receive 脚本就能满足要求，修改脚本为如下内容：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="built_in">export</span> LANG=<span class="string">"en_US.UTF-8"</span></span><br><span class="line">REJECT=0</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> oldrev newrev refname; <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">"<span class="variable">$oldrev</span>"</span> = <span class="string">"0000000000000000000000000000000000000000"</span> ];<span class="keyword">then</span></span><br><span class="line">        oldrev=<span class="string">"<span class="variable">$&#123;newrev&#125;</span>^"</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    files=`git diff --name-only <span class="variable">$&#123;oldrev&#125;</span> <span class="variable">$&#123;newrev&#125;</span>  | grep <span class="_">-e</span> <span class="string">"\.java$"</span>`</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> [ -n <span class="string">"<span class="variable">$files</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">        TEMPDIR=<span class="string">"tmp"</span></span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> <span class="variable">$&#123;files&#125;</span>; <span class="keyword">do</span></span><br><span class="line">            mkdir -p <span class="string">"<span class="variable">$&#123;TEMPDIR&#125;</span>/`dirname <span class="variable">$&#123;file&#125;</span>`"</span> &gt;/dev/null</span><br><span class="line">            git show <span class="variable">$newrev</span>:<span class="variable">$file</span> &gt; <span class="variable">$&#123;TEMPDIR&#125;</span>/<span class="variable">$&#123;file&#125;</span></span><br><span class="line">        <span class="keyword">done</span>;</span><br><span class="line"></span><br><span class="line">        files_to_check=`find <span class="variable">$TEMPDIR</span> -name <span class="string">'*.java'</span>`</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">         /home/jdk1.8.0_212/bin/java -cp /home/p3c-pmd-1.3.6.jar net.sourceforge.pmd.PMD <span class="_">-d</span> <span class="variable">$TEMPDIR</span> -R rulesets/java/ali-comment.xml,rulesets/java/ali-concurrent.xml,rulesets/java/ali-constant.xml,rulesets/java/ali-exception.xml,rulesets/java/ali-flowcontrol.xml,rulesets/java/ali-naming.xml,rulesets/java/ali-oop.xml,rulesets/java/ali-orm.xml,rulesets/java/ali-other.xml,rulesets/java/ali-set.xml <span class="_">-f</span> text</span><br><span class="line">       </span><br><span class="line">         REJECT=$?</span><br><span class="line">         </span><br><span class="line">         </span><br><span class="line">          <span class="keyword">if</span> [[ <span class="variable">$REJECT</span> == 0 ]] ;<span class="keyword">then</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="_">-e</span> <span class="string">"\033[32m恭喜你代码通过质量检测！\033[0m"</span></span><br><span class="line">             <span class="keyword">else</span> <span class="built_in">echo</span> <span class="_">-e</span> <span class="string">"\033[31m\033[01m 请及时修改代码并再次尝试\033[0m"</span> </span><br><span class="line">          <span class="keyword">fi</span></span><br><span class="line">     </span><br><span class="line">        rm -rf <span class="variable">$TEMPDIR</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span> <span class="variable">$REJECT</span></span><br></pre></td></tr></table></figure>
<p>上面代码是根据简书上的一个 blog 做了微调，如果你要用的话只需要修改 java 路径和 p3c.jar 的路径，这个脚本接受的是标准输入流，具体可以查看下方链接。</p>
<p>参考链接：</p>
<p><a href="https://www.jianshu.com/p/b87ca8615c9c" target="_blank" rel="noopener">如何生成整合了阿里巴巴JAVA编码规范的PMD包配合GitLab提升团队代码质量</a></p>
<p><a href="https://www.jianshu.com/p/5531a21afa68" target="_blank" rel="noopener">Gitlab 服务器端 custom hook 配置</a></p>
<p><a href="[https://git-scm.com/book/zh/v2/%E8%87%AA%E5%AE%9A%E4%B9%89-Git-Git-%E9%92%A9%E5%AD%90](https://git-scm.com/book/zh/v2/自定义-Git-Git-钩子">自定义 Git - Git 钩子</a>)</p>
<p><a href="https://gitirc.eu/githooks.html" target="_blank" rel="noopener">githooks(5) Manual Page</a></p>
<p><a href="https://www.jianshu.com/p/de90ffbd53e9" target="_blank" rel="noopener">使用git钩子对提交代码进行检查(pre-commit)</a></p>
]]></content>
      
        <categories>
            
            <category> 架构 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[query 改写]]></title>
      <url>/2019/06/18/query-rewrite/</url>
      <content type="html"><![CDATA[<h1 id="什么是-query-改写"><a href="#什么是-query-改写" class="headerlink" title="什么是 query 改写"></a>什么是 query 改写</h1><p>query 改写是搜索系统中最基础也是最重要的一个模块，简单来讲就是把用户输入的 keyword 转换成最贴近搜索系统内部的可识别的 keyword。</p>
<p>搜索引擎检索 keyword 的时候主要是匹配和排序，匹配也常常被称作“召回”，在搜索和推荐领域会有一个“召回率”的指标，在此不做展开。query 改写则会直接影响召回的指标</p>
<p>query 改写可以分成几个大的功能：纠错（ERROR Correction）、意图改写、记录 keyword</p>
<p>举个电商行业的例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">用户搜索关键字: 男士鞋</span><br><span class="line"></span><br><span class="line">倒排索引：</span><br><span class="line"> doc1: 男士鞋白色百搭</span><br><span class="line"> doc2: 男鞋红色运动型</span><br><span class="line"> doc3: 鞋子蓝色透气舒适</span><br><span class="line"> doc4: 女生跑步鞋</span><br></pre></td></tr></table></figure>
<p>如果不进行 query 改写那么它就会返回在索引中与 “男士鞋” 完全匹配的文档，此时只有 doc1 能够被召回，此时显然不是我们想要的，如果 改写 query 会是什么样的？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">男士鞋 -&gt; 男|男士|鞋</span><br></pre></td></tr></table></figure>
<p>将 keyword 按一定的逻辑进行拆分，然后推测用户想要搜什么，也就是拆分后的字或者词哪个是重要的。这样就能返回 doc1 和 doc2 以及可能会返回 doc3 ，这就有一定的概率性，牺牲一定的准确度来获得更多商品的召回。</p>
<h1 id="怎么去做-query-改写"><a href="#怎么去做-query-改写" class="headerlink" title="怎么去做 query 改写"></a>怎么去做 query 改写</h1><ul>
<li>n-gram （N 元语法模型）</li>
<li>知识图谱</li>
<li>协同过滤</li>
</ul>
<p>​    <strong>n</strong>-<strong>gram</strong></p>
]]></content>
      
        <categories>
            
            <category> 搜索 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 理论 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[阶段性总结]]></title>
      <url>/2019/06/18/summary10/</url>
      <content type="html"><![CDATA[<p>博客断断续续的在更着，总是想写总是找不到合适的时间。</p>
<h1 id="做了那些事情"><a href="#做了那些事情" class="headerlink" title="做了那些事情"></a>做了那些事情</h1><h2 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h2><p>用 solr 将公司的搜索系统重构了一遍，但是感觉很有成就感，但现在看来真的很 low ，当然好的架构是简单高效的，但是对于搜索用 job 的方式去同步真的很 low ，而且性能很差。搜索是商品展示的关键，为什么要用 job 的方式去同步，这是领导决定的，不接受任何建议，我有心无力。这是一件憾事。</p>
<h2 id="钉钉人员同步"><a href="#钉钉人员同步" class="headerlink" title="钉钉人员同步"></a>钉钉人员同步</h2><p> 我想吐槽一下钉钉的官网文档，很难理清顺序，最初还是问的钉钉客服才知道应该看哪一个，为什么要用钉钉人员数据，因为对于人员变动钉钉是及时更新的，而公司内部系统想做成统一的平台，统一用户、统一权限、统一风格。前端用 Antd ，后端 springboot 。思想是好的，但实施起来真的很困难。固有思想很难变化。</p>
<h2 id="搜索的理论知识"><a href="#搜索的理论知识" class="headerlink" title="搜索的理论知识"></a>搜索的理论知识</h2><p>做搜索让我找到了兴趣点，搜索其实是理论依据很高的一个领域，信息检索、数学等都需要储备。</p>
<p>推荐几本有关搜索方面值得一读的书(从前到后，由浅入深，由实战到理论)</p>
<p>《深入</p>
<p>《Lucene ElasticSearch 检索实战》</p>
<p>《这就是搜索引擎：核心技术详解》</p>
<p>《信息检索导论》</p>
<h1 id="未来计划"><a href="#未来计划" class="headerlink" title="未来计划"></a>未来计划</h1><p>到八一参加工作就满一年了，可能会出去再历练历练，找一份搜索相关的工作。</p>
]]></content>
      
        <categories>
            
            <category> 总结 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 工作总结 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[操作系统作用]]></title>
      <url>/2019/06/01/os1/</url>
      <content type="html"><![CDATA[<h1 id="操作系统作用"><a href="#操作系统作用" class="headerlink" title="操作系统作用"></a>操作系统作用</h1><h2 id="1、资源管理者"><a href="#1、资源管理者" class="headerlink" title="1、资源管理者"></a>1、资源管理者</h2><h3 id="都能管理什么？"><a href="#都能管理什么？" class="headerlink" title="都能管理什么？"></a>都能管理什么？</h3><h4 id="自底向上"><a href="#自底向上" class="headerlink" title="自底向上"></a>自底向上</h4><p>对于操作系统内部来讲</p>
<h4 id="硬件资源"><a href="#硬件资源" class="headerlink" title="硬件资源"></a>硬件资源</h4><p>像 CPU 、内存、设备（输入输出设备、磁盘、时钟、网卡）</p>
<h4 id="软件资源"><a href="#软件资源" class="headerlink" title="软件资源"></a>软件资源</h4><p>磁盘上的文件，各类管理信息</p>
<h3 id="如何管理"><a href="#如何管理" class="headerlink" title="如何管理"></a>如何管理</h3><ul>
<li>跟踪记录资源的使用情况</li>
<li>确定资源的分配策略</li>
<li>实施资源的分配与回收</li>
<li>提高资源利用率</li>
<li>保护资源的使用</li>
<li>协调多个进程对资源的请求</li>
</ul>
<h3 id="从资源管理的角度总结出的-OS-五大特征"><a href="#从资源管理的角度总结出的-OS-五大特征" class="headerlink" title="从资源管理的角度总结出的 OS 五大特征"></a>从资源管理的角度总结出的 OS 五大特征</h3><h4 id="进程-线程-管理（CPU-管理）"><a href="#进程-线程-管理（CPU-管理）" class="headerlink" title="进程/线程 管理（CPU 管理）"></a>进程/线程 管理（CPU 管理）</h4><p>进程线程状态，控制、同步、互斥、通信调度</p>
<h4 id="存储管理"><a href="#存储管理" class="headerlink" title="存储管理"></a>存储管理</h4><p>分配和回收、地址转换、存储保护、内存扩充</p>
<h4 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h4><p>文件目录、文件操作、磁盘空间、文件存取控制</p>
<h4 id="设备管理"><a href="#设备管理" class="headerlink" title="设备管理"></a>设备管理</h4><p>设备驱动、分配回收、缓冲技术</p>
<h4 id="用户接口"><a href="#用户接口" class="headerlink" title="用户接口"></a>用户接口</h4><p>系统命令、编程接口</p>
<h2 id="2、系统资源的提供者"><a href="#2、系统资源的提供者" class="headerlink" title="2、系统资源的提供者"></a>2、系统资源的提供者</h2><h3 id="从用户的角度看"><a href="#从用户的角度看" class="headerlink" title="从用户的角度看"></a>从用户的角度看</h3><p>操作系统为用户提供了功能强大且方便易用的命令或者系统调用</p>
<h3 id="典型的服务"><a href="#典型的服务" class="headerlink" title="典型的服务"></a>典型的服务</h3><ul>
<li>进程创建、执行</li>
<li>文件和目录操作</li>
<li>输入输出设备的使用</li>
<li>各类统计信息</li>
</ul>
<h2 id="3、对计算机硬件的扩展"><a href="#3、对计算机硬件的扩展" class="headerlink" title="3、对计算机硬件的扩展"></a>3、对计算机硬件的扩展</h2><p>操作系统在应用程序与计算机硬件之间建立了一个等价的扩展机器（虚拟机）</p>
<p>对硬件的抽象，提供了可移植性，比底层更容易编程</p>
]]></content>
      
        <categories>
            
            <category> 架构 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> os </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[leetcode206]]></title>
      <url>/2019/05/30/leetcode206/</url>
      <content type="html"><![CDATA[<p><img src="https://ahian-blog.oss-cn-beijing.aliyuncs.com/images/Paper.Paper%20%E5%B7%A5%E5%85%B7.21.PNG?Expires=1559184132&amp;OSSAccessKeyId=TMP.AgFLVFCYpRjvpgIdC-LDRRj6JCUB1ibliK1ycCCtj7Nt9NMwsKoKWH9us7X_ADAtAhUAjHGJ_qlet9_nYP6iuQwqaskaZSgCFDTWqINtPo0YNfeemaYTBQbbaJCk&amp;Signature=G1UP5FAmXgyC45XdQ3xOU6DuY%2B8%3D" alt></p>
<p><strong>Consideration</strong> </p>
<ul>
<li>make three pointers , pre,current,next;</li>
<li>initial pre as null</li>
<li>use tmp to save current’s next node info</li>
<li>change current’s next to link pre node(first is null)</li>
<li>move pre pointer to next node</li>
<li>move current pointer to next node</li>
</ul>
<p><strong>soultion</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">     ListNode pre = <span class="keyword">null</span>;</span><br><span class="line">        ListNode current = head;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (current != <span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">            ListNode next = current.next;</span><br><span class="line">            current.next = pre;</span><br><span class="line">            pre = current;</span><br><span class="line">            current = next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pre;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 算法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hamming-distance]]></title>
      <url>/2019/05/28/leetcode461/</url>
      <content type="html"><![CDATA[<p>The <strong>Hamming distance</strong> between two integers is the number of positions at which the corresponding bits are different.</p>
<p>Given two integers <code>x</code> and <code>y</code>, calculate the Hamming distance.</p>
<p><strong>Note:</strong><br>0 ≤ <code>x</code>, <code>y</code> &lt; 231.</p>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Input: x = 1, y = 4</span><br><span class="line"></span><br><span class="line">Output: 2</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line">1   (0 0 0 1)</span><br><span class="line">4   (0 1 0 0)</span><br><span class="line">       ↑   ↑</span><br><span class="line"></span><br><span class="line">The above arrows point to positions where the corresponding bits are different.</span><br></pre></td></tr></table></figure>
<p><strong>Consideration</strong></p>
<p>This problem is also have a relationship with ‘^’  , Think about it :</p>
<p><strong><em>1(0001)</em></strong> and <strong><em>4(0100)</em></strong> their Xor is <strong><em>5(0101)</em></strong>  .  next we use <strong>&amp;</strong> Operator to calculate the number of <strong><em>1  ,</em></strong> let the binary &amp; 1 ,if result is 1 ,sum’s up , use <strong><em>&gt;&gt;</em></strong> to move the postion.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">5(0101)</span><br><span class="line">0&amp;1  = 0            pass</span><br><span class="line">01&amp;01 = 1           sum</span><br><span class="line">010&amp;001 = 0         pass</span><br><span class="line">0101&amp;0001 = 1       sum</span><br></pre></td></tr></table></figure>
<p>so,the anwser is <strong><em>2</em></strong></p>
<p><strong>Solution</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hammingDistance</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">	         </span><br><span class="line">         <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">         <span class="keyword">int</span> xor = x ^ y;</span><br><span class="line">	 </span><br><span class="line">	    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">32</span>;i++)&#123;</span><br><span class="line">	    	</span><br><span class="line">             sum+=(xor&gt;&gt;i)&amp;<span class="number">1</span>;</span><br><span class="line">	    &#125;</span><br><span class="line">	       </span><br><span class="line">		<span class="keyword">return</span> sum;</span><br><span class="line">	    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>tips: if you don’t understand the Xor ,you can see my<a href="http://younge.group/2018/07/08/136-single-number/" target="_blank" rel="noopener"> older article</a> which about Xor  .and the flowing is about <strong>Hamming Distance</strong> from wiki.</p>
<p><a href="https://en.wikipedia.org/wiki/File:Hamming_distance_3_bit_binary.svg" target="_blank" rel="noopener"><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/b/b4/Hamming_distance_3_bit_binary.svg/140px-Hamming_distance_3_bit_binary.svg.png" alt="461. Hamming Distance"></a></p>
<p>3-bit binary <a href="https://en.wikipedia.org/wiki/Cube" target="_blank" rel="noopener">cube</a> for finding Hamming distance</p>
<p><a href="https://en.wikipedia.org/wiki/File:Hamming_distance_3_bit_binary_example.svg" target="_blank" rel="noopener"><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/6/6e/Hamming_distance_3_bit_binary_example.svg/140px-Hamming_distance_3_bit_binary_example.svg.png" alt="461. Hamming Distance"></a></p>
<p>Two example distances: 100→011 has distance 3; 010→111 has distance 2</p>
<p>The minimum distance between any two vertices is the Hamming distance between the two binary strings.</p>
]]></content>
      
        <categories>
            
            <category> 算法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ElasticSearch API 基本操作]]></title>
      <url>/2019/05/27/elasticsearch03/</url>
      <content type="html"><![CDATA[<h1 id="查看集群健康值"><a href="#查看集群健康值" class="headerlink" title="查看集群健康值"></a>查看集群健康值</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET _cat/health?v</span><br></pre></td></tr></table></figure>
<h1 id="查看-node-信息"><a href="#查看-node-信息" class="headerlink" title="查看 node 信息"></a>查看 node 信息</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET _nodes</span><br></pre></td></tr></table></figure>
<h1 id="查看索引信息"><a href="#查看索引信息" class="headerlink" title="查看索引信息"></a>查看索引信息</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET _cat/indices?v</span><br></pre></td></tr></table></figure>
<h1 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PUT /test?pretty</span><br></pre></td></tr></table></figure>
<h1 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE /test?pretty</span><br></pre></td></tr></table></figure>
<h1 id="新建文档并建立索引"><a href="#新建文档并建立索引" class="headerlink" title="新建文档并建立索引"></a>新建文档并建立索引</h1><h2 id="创建一个index为-ecommerce-的索引"><a href="#创建一个index为-ecommerce-的索引" class="headerlink" title="创建一个index为 ecommerce 的索引"></a>创建一个index为 ecommerce 的索引</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">PUT /ecommerce/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;product_id&quot;:1234,</span><br><span class="line">  &quot;product_name&quot;: &quot;南极人&quot;,</span><br><span class="line">  &quot;price&quot;:99.9,</span><br><span class="line">  &quot;color&quot;:&quot;Red&quot;,</span><br><span class="line">  &quot;tags&quot;:[&quot;轻松&quot;,&quot;舒服&quot;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT /ecommerce/_doc/2</span><br><span class="line">&#123;</span><br><span class="line"> &quot;product_id&quot;:5678,</span><br><span class="line">  &quot;product_name&quot;: &quot;寓美&quot;,</span><br><span class="line">  &quot;price&quot;:199.9,</span><br><span class="line">  &quot;color&quot;:&quot;White&quot;,</span><br><span class="line">  &quot;tags&quot;:[&quot;透气&quot;,&quot;实惠&quot;]</span><br><span class="line">&#125;</span><br><span class="line">PUT /ecommerce/_doc/3</span><br><span class="line">&#123;</span><br><span class="line">  &quot;product_id&quot;:23333,</span><br><span class="line">  &quot;product_name&quot;: &quot;金利来&quot;,</span><br><span class="line">  &quot;price&quot;:1899.9,</span><br><span class="line">  &quot;color&quot;:&quot;Blue&quot;,</span><br><span class="line">  &quot;tags&quot;:[&quot;奢侈&quot;,&quot;豪华&quot;]</span><br><span class="line">&#125;</span><br><span class="line">PUT /ecommerce/_doc/4</span><br><span class="line">&#123;</span><br><span class="line">  &quot;product_id&quot;:4444,</span><br><span class="line">  &quot;product_name&quot;: &quot;南极人上衣&quot;,</span><br><span class="line">  &quot;price&quot;:19.9,</span><br><span class="line">  &quot;color&quot;:&quot;Yellow&quot;,</span><br><span class="line">  &quot;tags&quot;:[&quot;保暖&quot;,&quot;豪华&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="查询操作"><a href="#查询操作" class="headerlink" title="查询操作"></a>查询操作</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /ecommerce/_doc/1</span><br></pre></td></tr></table></figure>
<h1 id="更新操作方式1"><a href="#更新操作方式1" class="headerlink" title="更新操作方式1"></a>更新操作方式1</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">PUT /ecommerce/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;product_id&quot;:1234,</span><br><span class="line">  &quot;product_name&quot;:&quot;南极人裤子&quot;,</span><br><span class="line">  &quot;price&quot;:99.9,</span><br><span class="line">  &quot;color&quot;:&quot;Red&quot;,</span><br><span class="line">  &quot;tags&quot;:[&quot;保暖&quot;,&quot;舒服&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="更新操作方式2"><a href="#更新操作方式2" class="headerlink" title="更新操作方式2"></a>更新操作方式2</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">POST /ecommerce/_update/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;doc&quot;: &#123;</span><br><span class="line">    &quot;product_id&quot;: 1234</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE /ecommerce/_doc/1</span><br></pre></td></tr></table></figure>
<h1 id="DSL-查询"><a href="#DSL-查询" class="headerlink" title="DSL 查询"></a>DSL 查询</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">GET _search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_all&quot;: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;timeout&quot;: &quot;1ms&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="查询并按价格排序"><a href="#查询并按价格排序" class="headerlink" title="查询并按价格排序"></a>查询并按价格排序</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">GET /ecommerce/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;product_name&quot;: &quot;南极人&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;sort&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;price&quot;: &#123;</span><br><span class="line">        &quot;order&quot;: &quot;desc&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="指定返回的-field"><a href="#指定返回的-field" class="headerlink" title="指定返回的 field"></a>指定返回的 field</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">GET /ecommerce/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_all&quot;: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;_source&quot;:[&quot;product_id&quot;,&quot;product_name&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="分页查询-从-0-开始，每页一个"><a href="#分页查询-从-0-开始，每页一个" class="headerlink" title="分页查询 从 0 开始，每页一个"></a>分页查询 从 0 开始，每页一个</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GET /ecommerce/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;&quot;match_all&quot;: &#123;&#125;&#125;,</span><br><span class="line">  &quot;from&quot;: 0,</span><br><span class="line">  &quot;size&quot;: 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="query-filter"><a href="#query-filter" class="headerlink" title="query filter"></a>query filter</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># https://www.elastic.co/guide/en/elasticsearch/reference/7.0/query-filter-context.html</span><br><span class="line">GET /ecommerce/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;must&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;match&quot;: &#123;</span><br><span class="line">            &quot;product_name&quot;: &quot;南极人&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      &quot;filter&quot;: &#123;&quot;range&quot;: &#123;</span><br><span class="line">        &quot;price&quot;: &#123;</span><br><span class="line">          &quot;gte&quot;: 20,</span><br><span class="line">          &quot;lte&quot;: 100</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="全文检索"><a href="#全文检索" class="headerlink" title="全文检索"></a>全文检索</h1><h2 id="只要-field-中有就返回"><a href="#只要-field-中有就返回" class="headerlink" title="只要 field 中有就返回"></a>只要 field 中有就返回</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /ecommerce/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;product_name&quot;: &quot;南极人&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="highlight"><a href="#highlight" class="headerlink" title="highlight"></a>highlight</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">GET /ecommerce/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;product_name&quot;: &quot;南极人&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;highlight&quot;: &#123;</span><br><span class="line">    &quot;fields&quot;: &#123;</span><br><span class="line">      &quot;product_name&quot;:&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="fuzziness-模糊查询"><a href="#fuzziness-模糊查询" class="headerlink" title="fuzziness 模糊查询"></a>fuzziness 模糊查询</h1><h2 id="先用全文检索"><a href="#先用全文检索" class="headerlink" title="先用全文检索"></a>先用全文检索</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /ecommerce/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;product_name&quot;: &quot;南极人上衣&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="开启模糊查询"><a href="#开启模糊查询" class="headerlink" title="开启模糊查询"></a>开启模糊查询</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">GET /ecommerce/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;product_name&quot;: &#123;</span><br><span class="line">        &quot;query&quot;: &quot;南极人上衣&quot;,</span><br><span class="line">        &quot;operator&quot;: &quot;and&quot;</span><br><span class="line">      &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="phrase-search"><a href="#phrase-search" class="headerlink" title="phrase search"></a>phrase search</h1><h2 id="完全匹配"><a href="#完全匹配" class="headerlink" title="完全匹配"></a>完全匹配</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /ecommerce/_search</span><br><span class="line">&#123;</span><br><span class="line"> &quot;query&quot;: &#123;</span><br><span class="line">   &quot;match_phrase&quot;: &#123;</span><br><span class="line">     &quot;product_name&quot;: &quot;南极人上衣&quot;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="聚合查询"><a href="#聚合查询" class="headerlink" title="聚合查询"></a>聚合查询</h1><h2 id="正排"><a href="#正排" class="headerlink" title="正排"></a>正排</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Set fielddata=true on [tags] in order to load fielddata in memory by uninverting the inverted index. Note that this can however use significant memory. Alternatively use a keyword field instead.&quot;</span><br><span class="line">PUT /ecommerce/_mapping</span><br><span class="line">&#123;</span><br><span class="line">  &quot;properties&quot;: &#123;</span><br><span class="line">    &quot;tags&quot;:&#123;</span><br><span class="line">      &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">      &quot;fielddata&quot;: true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="aggs"><a href="#aggs" class="headerlink" title="aggs"></a>aggs</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET /ecommerce/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;aggs&quot;: &#123;</span><br><span class="line">    &quot;whatever&quot;: &#123;</span><br><span class="line">      &quot;terms&quot;: &#123;</span><br><span class="line">        &quot;field&quot;: &quot;tags&quot;,</span><br><span class="line">        &quot;size&quot;: 10</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="先分组再求平均值-之后按平均值排序"><a href="#先分组再求平均值-之后按平均值排序" class="headerlink" title="先分组再求平均值,之后按平均值排序"></a>先分组再求平均值,之后按平均值排序</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">GET /ecommerce/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;product_name&quot;: &quot;南极人&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, </span><br><span class="line">  &quot;aggs&quot;: &#123;</span><br><span class="line">    &quot;NAME&quot;: &#123;</span><br><span class="line">      &quot;terms&quot;: &#123;</span><br><span class="line">        &quot;field&quot;: &quot;tags&quot;,</span><br><span class="line">        &quot;order&quot;: &#123;</span><br><span class="line">          &quot;avg_price&quot;: &quot;asc&quot;</span><br><span class="line">        &#125;, </span><br><span class="line">        &quot;size&quot;: 10</span><br><span class="line">      &#125;,</span><br><span class="line">    &quot;aggs&quot;: &#123;</span><br><span class="line">      &quot;avg_price&quot;: &#123;</span><br><span class="line">       &quot;avg&quot;: &#123;</span><br><span class="line">         &quot;field&quot;: &quot;price&quot;</span><br><span class="line">       &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="区间"><a href="#区间" class="headerlink" title="区间"></a>区间</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">GET /ecommerce/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;aggs&quot;: &#123;</span><br><span class="line">    &quot;price_range&quot;: &#123;</span><br><span class="line">      &quot;range&quot;: &#123;</span><br><span class="line">        &quot;field&quot;: &quot;price&quot;,</span><br><span class="line">        &quot;ranges&quot;: [</span><br><span class="line">          &#123;&quot;from&quot;: 0,</span><br><span class="line">            &quot;to&quot;: 50</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            &quot;from&quot;: 50,</span><br><span class="line">            &quot;to&quot;: 100</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            &quot;from&quot;: 100</span><br><span class="line">            , &quot;to&quot;: 150</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;&quot;from&quot;: 150,</span><br><span class="line">            &quot;to&quot;: 200</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">        &quot;aggs&quot;: &#123;</span><br><span class="line">    &quot;tags_group&quot;: &#123;</span><br><span class="line">      &quot;terms&quot;: &#123;</span><br><span class="line">        &quot;field&quot;: &quot;tags&quot;,</span><br><span class="line">        &quot;size&quot;: 10</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;aggs&quot;: &#123;</span><br><span class="line">        &quot;avg_price&quot;: &#123;</span><br><span class="line">          &quot;avg&quot;: &#123;</span><br><span class="line">            &quot;field&quot;: &quot;price&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 搜索 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ElasticSearch </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[elasticsearch 集群容错]]></title>
      <url>/2019/05/24/elasticsearch02/</url>
      <content type="html"><![CDATA[<p><strong>Q:有三台服务器，三个 Primary Shard怎么配置能使 ElasticSearch 达到高可用</strong></p>
<p>在此之前应该先清楚 shard 、primary shard 、replica shard、node 的概念</p>
<p>还有 primary shard 在确定好个数后后期是无法更改的，能扩容的只有 replica shard。</p>
<p>三个 Primary Shard 的意思就是：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3 primary + 3 replica = 6 shard (默认情况下)</span><br></pre></td></tr></table></figure>
<p>此时服务器的 node 分配如下：</p>
<p><img src="https://ahian-blog.oss-cn-beijing.aliyuncs.com/images/Paper.Paper%20%E5%B7%A5%E5%85%B7.18.png?Expires=1558947583&amp;OSSAccessKeyId=TMP.AgH9mmTffxqMm4bhGAQ2HQE6QZVHGlXuLxTF_Otw1cwBFkS6Tq0qyXpyQLplADAtAhUAkDAclpmnqDQSb5wuqbGwFgij2a8CFAoBuVW2l6aKeIIeIpv8IZy91CPt&amp;Signature=8nh55ELuWalMz0FtQNwnTweyDTk%3D" alt></p>
<h2 id="一台服务器宕机"><a href="#一台服务器宕机" class="headerlink" title="一台服务器宕机"></a>一台服务器宕机</h2><p>此时整个 ES 集群是能够正常提供服务的，但是健康值会降到 yellow 状态</p>
<p><img src="https://ahian-blog.oss-cn-beijing.aliyuncs.com/images/IMG_0038.PNG" alt></p>
<h2 id="两台服务器宕机"><a href="#两台服务器宕机" class="headerlink" title="两台服务器宕机"></a>两台服务器宕机</h2><p><img src="https://ahian-blog.oss-cn-beijing.aliyuncs.com/images/IMG_0039.PNG" alt></p>
<p>此时你会发现剩下的一台服务器上只会有一个 primary shard 和 一个 replica shard 节点，此时集群状态是 red 转态。</p>
<p>怎么去分配能够使两台机器宕机后仍能正常使用？</p>
<h2 id="设置更多的-replica-shard"><a href="#设置更多的-replica-shard" class="headerlink" title="设置更多的 replica shard"></a>设置更多的 replica shard</h2><p>既然 primary shard 初始化后不能再扩容了，那么可以扩容 replica shard。</p>
<p>如下图，每台机器上不论是 primary 还是 replica shard 都保持了均与分布的状态，此时两台机器宕机后 ES 集群会自动将剩余的节点全都置位 primary shard。其内部原理将会在后面讲到。</p>
<p><img src="https://ahian-blog.oss-cn-beijing.aliyuncs.com/images/IMG_0040.PNG" alt></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>虽然 replica shard 可以在后期调整，但是最佳的做法就是在确认架构的时候，而不是发现问题后再进行补救。</p>
]]></content>
      
        <categories>
            
            <category> 搜索 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ElasticSearch </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ElasticSearch 基础概念]]></title>
      <url>/2019/05/23/elastic-search/</url>
      <content type="html"><![CDATA[<p><img src="https://ahian-blog.oss-cn-beijing.aliyuncs.com/images/IMG_0037.JPEG" alt="distru"></p>
<h1 id="documnet"><a href="#documnet" class="headerlink" title="documnet"></a>documnet</h1><p>文档，类似于 Java 的实体类，但非面向对象的，比实体类更加灵活。</p>
<h1 id="index"><a href="#index" class="headerlink" title="index"></a>index</h1><p>索引，用来存放文档，一个索引可存放若干个 document</p>
<h1 id="type"><a href="#type" class="headerlink" title="type"></a>type</h1><p>ElastcSearch 7 以后过时，使用 _doc 代替，预计在未来会移除</p>
<h1 id="node"><a href="#node" class="headerlink" title="node"></a>node</h1><p>单个服务器，其实就是一个 ES 实例，多个 node 组成一个集群，node 能够进行索引和查询操作。默认每个 node 启动时会分配一个 UUID 作为标识。</p>
<h1 id="shard"><a href="#shard" class="headerlink" title="shard"></a>shard</h1><p>分片，用来存储索引，分为以下两个shard，平时认为 shard 为 primary shard 。</p>
<p>ES 默认会分配 一个 primary shard 和与之对应的 replica shard。</p>
<p>分片的目的是对 index 进行横向拆分，避免 index 容量过大所带来的性能和系统稳定问题，以及它的 failover mechanism 能够增加几群的容错能力。</p>
<p>引用官方的话</p>
<blockquote>
<p>Sharding is important for two primary reasons:</p>
<ul>
<li>It allows you to horizontally split/scale your content volume</li>
<li>It allows you to distribute and parallelize operations across shards (potentially on multiple nodes) thus increasing performance/throughput</li>
</ul>
</blockquote>
<p>对于 shard 它是有容量上限的(Integer.MAX_VALUE - 128)</p>
<blockquote>
<p>Each Elasticsearch shard is a Lucene index. There is a maximum number of documents you can have in a single Lucene index. As of <a href="https://issues.apache.org/jira/browse/LUCENE-5843" target="_blank" rel="noopener"><code>LUCENE-5843</code></a>, the limit is <code>2,147,483,519</code> (= Integer.MAX_VALUE - 128) documents. You can monitor shard sizes using the <a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.1/cat-shards.html" target="_blank" rel="noopener"><code>_cat/shards</code></a> API.</p>
</blockquote>
<h2 id="primary-original-shard"><a href="#primary-original-shard" class="headerlink" title="primary/original shard"></a>primary/original shard</h2><p>主分片</p>
<h2 id="replica-shard"><a href="#replica-shard" class="headerlink" title="replica shard"></a>replica shard</h2><p>副本分片,是主分片的副本，其内容和主分片内容一致，但<strong>不会同自己的主分片放在同一个 node 上</strong>。</p>
<h1 id="cluster-state"><a href="#cluster-state" class="headerlink" title="cluster state"></a>cluster state</h1><p>集群状态</p>
<table>
<thead>
<tr>
<th style="text-align:center">颜色</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">green</td>
<td style="text-align:center">集群健康</td>
</tr>
<tr>
<td style="text-align:center">yellow</td>
<td style="text-align:center">有 replica shard 没有正常运行</td>
</tr>
<tr>
<td style="text-align:center">red</td>
<td style="text-align:center">有 primary shard 没有正常运行</td>
</tr>
</tbody>
</table>
<p>参考文章：</p>
<p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/getting-started-concepts.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/current/getting-started-concepts.html</a></p>
]]></content>
      
        <categories>
            
            <category> 搜索 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ElasticSearch </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[技术选型怎么做]]></title>
      <url>/2019/05/23/technology-choice/</url>
      <content type="html"><![CDATA[<h1 id="技术选型包括哪些"><a href="#技术选型包括哪些" class="headerlink" title="技术选型包括哪些"></a>技术选型包括哪些</h1><p>从个人观点出发，技术选型包括框架、工具、语言。</p>
<h1 id="需要考虑的点"><a href="#需要考虑的点" class="headerlink" title="需要考虑的点"></a>需要考虑的点</h1><ul>
<li>公司规模</li>
<li>团队技术水平</li>
<li>时间和成本</li>
<li>生态</li>
<li>风险</li>
</ul>
<h2 id="公司规模"><a href="#公司规模" class="headerlink" title="公司规模"></a>公司规模</h2><h3 id="小公司"><a href="#小公司" class="headerlink" title="小公司"></a>小公司</h3><p>对于初创公司或者小公司来讲，上级领导的意愿更多的是能够快速盈利，此时应该选择<strong>成熟便捷的框架</strong>，<br>尽量减少学习成本，这就属于经验优先，因为只有做出成品并且盈利，公司才能够生存。</p>
<h3 id="中型公司"><a href="#中型公司" class="headerlink" title="中型公司"></a>中型公司</h3><p>中型公司是由小公司慢慢发展的，此时技术有了一定的积累，并且也有能力自己去做一些定制化的开发，此时需要考虑的问题是<strong>自己开发还是使用现有产品</strong> </p>
<p>举个例子：目前公司内部需要搭建一套日志收集和监控系统，该怎么做？<br>         很多人最先想到的是 ELK ，但这样是不可以的，选型的话你要了解市场上都有哪些日志的框架，结合实际的项目，找到最方便的那一个，不能说 ELK 用的人多你就用，项目部署在阿里云，那使用阿里云的日志服务是不是更方便快捷？</p>
<h3 id="大型公司"><a href="#大型公司" class="headerlink" title="大型公司"></a>大型公司</h3><p>大型公司就比较随意了，可能会花很长时间很多精力放在自研上</p>
<h2 id="团队技术水平"><a href="#团队技术水平" class="headerlink" title="团队技术水平"></a>团队技术水平</h2><p>如果一个技术恰好能够解决当前遇到的问题或者在重构时能够解决性能的瓶颈，但是，它可能是用 GO 语言写的，而团队用的是 Java，此时需要考虑的是如果引进来了，那么能够多久能上手呢？之前看到某公司招聘的 JD ，如果你自认为可以在一周内精通领域，那么上述的要求可以不用遵循。所以在面试新人时就需要从多维度去考察，在此不细说；如果成员已经确定但是技术水平不高，那么你就需要如何去提升团队的技术水平。</p>
<h2 id="时间和成本"><a href="#时间和成本" class="headerlink" title="时间和成本"></a>时间和成本</h2><p>记住，如果你在公司工作，那你就是给别人打工的，你的职责就是让企业赚钱，领导不会关心你用什么技术，但他能知道你用多久去把业务实现，此时你需要考虑什么？理想状态是时间短高收益，这需要借助二八原则，用百分之二十的成本带来百分之八十的收益。</p>
<p>举个例子：领导规定三天时间日志服务搭起来，并且上生产环境，如果你用 ELK 那你需要很多配置，如果你用云产品，直接集成就能用。有人可能会想，用云产品不是得花很多钱吗？我最初也是这样想，但后来我是这样想，首先钱不用你出，而且你自己搭的 ELK 后期维护消耗多少算过没有，和你云服务比一比看看哪个多。</p>
<h2 id="风险"><a href="#风险" class="headerlink" title="风险"></a>风险</h2><p>风险其实一般很难发现的，比如安全问题，只有漏洞报出来你才会知道，还有就是有 BUG 但项目不维护了，这就是最后要讲的生态。</p>
<h2 id="生态"><a href="#生态" class="headerlink" title="生态"></a>生态</h2><p>一个好的项目不是看多少人用，而是有一个成熟的社区，你提问题有人及时回，你提建议或者 BUG 开发人员会跟进，采纳后会加入下次发版，这比你遇到问题后去提 issue 人家不回你，问别人也不清楚，这样就是一次失败的选型。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>技术选型离不开业务，脱离了业务你的技术再高也将无法体现。选型重要的还是选择问题，这能映射成生活，权衡一件事，要从多个角度去思考。</p>
]]></content>
      
        <categories>
            
            <category> 架构 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[条件概率、全概率与贝叶斯公式]]></title>
      <url>/2019/05/18/math01/</url>
      <content type="html"><![CDATA[<h1 id="条件概率公式"><a href="#条件概率公式" class="headerlink" title="条件概率公式"></a>条件概率公式</h1><p>设事件A 发生的概率为 P(A), 事件B 发生的概率为 P(B),则在<code>事件B发生的情况下事件A发生的概率（A given B 的概率）</code>为：</p>
<p>$$ P(A|B)=\frac{P(AB)}{P(B)} $$</p>
<h1 id="全概率公式"><a href="#全概率公式" class="headerlink" title="全概率公式"></a>全概率公式</h1><p>如果直接求事件A 的概率比较困难的时候，可以将事件A发生的概率分成一个个小的事件B的概率</p>
<p>$$ P(A)=\sum \limits<em>n{P(B</em>{n})P(A|B_{n})} $$</p>
<h1 id="贝叶斯公式"><a href="#贝叶斯公式" class="headerlink" title="贝叶斯公式"></a>贝叶斯公式</h1><p>$$ P(B<em>{n}|A)=\frac{P(A|B</em>{n})P(B_{n})}{\sum \limits<em>n P(A|B</em>{n})P(B_{n})} $$</p>
]]></content>
      
        <categories>
            
            <category> 算法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 概率论 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[年终总结]]></title>
      <url>/2018/12/31/summary09/</url>
      <content type="html"><![CDATA[<p>很久没有写博客了，上一篇大概是在月初，这次算是对过去进行总结，准备迎接新的一年。<br>我不是很会写博客，纯粹是附庸风雅。</p>
<h2 id="2018年"><a href="#2018年" class="headerlink" title="2018年"></a>2018年</h2><p>今年是从学校走向工作岗位的第一年，也是第一个年终总结。</p>
<h3 id="学校"><a href="#学校" class="headerlink" title="学校"></a>学校</h3><p>感谢张健全老师，今年年初带我去一个初创公司做官网，现在看自己的代码很 LOW ，但当时已经算班上很 NB 的了，今年算是我的崛起之年，大一大二玩了两年，纯玩，没学什么，当初刚入学打算好好去学数学，结果因为老师的口音很重，还有自己脑子不好使，导致啥都没干，大三开始自学 JAVA ,和我的同桌一起，他学的比我认真比我专一，后来就导致全班的 jsp 网站都去请教他，而我呢，意志不坚定，开始决定主攻 JAVA ，后来决定学 Android ，再后来想学大数据等等，当然最后我也成了班上的‘大牛’，现在想想，很值得玩味，单纯而美好。在大学期间结识了朋友于XX，哈哈。我们小组是班上的学霸组，组里有两个美眉，毕业前送了她们两人一人一盒面膜，算是四年的交情了，每次都是快毕业的时候才会活跃。</p>
<h3 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h3><p>北京，八一，上品，这是我目前供职的公司，公司氛围很好，当初面试我的老大很有学识，理论基础很扎实，很爱读书，是我非常钦佩的前辈，但是不到两个月就去美团了，拿到了蚂蚁金服,华为，美团点评的 Offer 。新老大是位 TGO 会员，技术专家，我是他手里第一个转正的，如果说之前的老大是理论派，那么当前这位老大就是实干派了，他让我懂了如何去做好一个职场人士，教了我很多，让我从毛毛躁躁到踏踏实实。</p>
<h3 id="情感"><a href="#情感" class="headerlink" title="情感"></a>情感</h3><p>理想与现实之间，我在想男人花言巧语应不应该，我能这么快成长或许也是因为感情，或许我是自私的，我不知该如何去理清这段感情，不想再回忆了。</p>
<h2 id="2019年"><a href="#2019年" class="headerlink" title="2019年"></a>2019年</h2><h3 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h3><ul>
<li>从 0 到 1 完成数据结构的实现，完成《剑指 offer 》和 cc189。</li>
<li>完成我负责的两个系统</li>
<li>读完 6本 技术书籍和 10本 非技术书籍</li>
<li>攒钱</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 总结 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 年终总结 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[迁移到 ubuntu18 的问题及配置]]></title>
      <url>/2018/12/02/ubuntu01/</url>
      <content type="html"><![CDATA[<p>今天终于下定决心安装了 Ubuntu 系统，将新系统配置成自己熟悉的模式是需要很长的一段时间，更何况是双系统。下面是我遇到的问题，经过搜索与尝试并解决。</p>
<h3 id="执行关机或者重启时卡死"><a href="#执行关机或者重启时卡死" class="headerlink" title="执行关机或者重启时卡死"></a>执行关机或者重启时卡死</h3><p>在卡死后强制关机再启动后我去查了一下系统日志，发现是显卡驱动的问题，因为我的电脑是双显卡，一个是 Intel 的核显，另一个是 NVIDIA 的 GTX 1050 卡，在 Ubuntu 装完后系统默认使用的是核显，但是 3D 图形渲染却用的是 GTX 的，我不清楚具体是不是这个原因，只是在描述可能的问题，在尝试后总结出对于我的电脑适用的 Solution</p>
<p>1、 禁用掉 bios 里的 security boot ，有的可能是灰色不可变的，不同的 bios 有不同的关闭方式，我的 bios 是需要设置超级用户的密码，设置完成后就能关闭 security boot 了</p>
<p>2、在 Ubuntu 下使用下面命令查看显卡相关信息，我每次使用这两个命令后不久就卡死，每次都是强制关机。对磁盘损伤很大。<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lspci | grep -i vga</span><br><span class="line">lspci | grep -i 3d</span><br></pre></td></tr></table></figure></p>
<p>3、使用下面命令，查找 N卡驱动并安装适合本系统的驱动，安装完后重启(此时如果依然卡死那就再强制重启)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ubuntu-drivers devices</span><br><span class="line">sudo ubuntu-drivers autoinstall</span><br></pre></td></tr></table></figure></p>
<p>4、开机后会有一个 N卡的设置软件，此时系统默认使用的就是 N卡了。可以正常关机。</p>
<h3 id="优化问题"><a href="#优化问题" class="headerlink" title="优化问题"></a>优化问题</h3><p>优化成自己熟悉的环境，下载 SS 、IDEA 等还有各种其他的环境，去看一下知乎上推荐<br>软件</p>
]]></content>
      
        <categories>
            
            <category> 架构 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 效率 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[总结]]></title>
      <url>/2018/11/20/summary08/</url>
      <content type="html"><![CDATA[<p>有段时间没有写博客了，因为我在思考如何去写好一篇技术性文章，而不是随性所欲、天马星空似的。以前写的很多博客真的是太潦草，这就和 CSDN 那样一篇文章复制来复制去的不管什么页面样式乱了之类的，总之就是自己技术不到家，分析的深度也不过。看了会有很多感慨。只要死不了就不能停止学习新知识。</p>
<p>工作上逐步进入正轨，但健康方面需要提升，脾胃虚，这算是一个老毛病了，还得靠养。</p>
<p>之前老大分享的一个技术问题，感觉很有意思，假如有十万条数据需要更新到库中，但是需要先根据条件过滤一遍(很多表聚合在一起然后插到一张新表里，此处过滤是为了生成对应的格式)，现在有两个方案：</p>
<ul>
<li>过滤完数据后先 insert 进新表，紧接着进行 update ，然后循环操作十万次</li>
<li>将过滤后的数据 insert 到一张临时表里，等数据全部插入后再一起更新</li>
</ul>
<p>后者效率是前者的 60 倍左右，这里涉及到的问题是底层持久化需要做的 IO 消耗性能。</p>
<p>上周去参加了 Flink China 北京的 Meetup，有 360 、京东风控 、 GrowingIO 和 阿里巴巴的讲师，讲的都很出色，而且我还在现场面基了左耳听风的群友。</p>
]]></content>
      
        <categories>
            
            <category> 总结 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 工作总结 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用 psi-probe 监控 Tomcat]]></title>
      <url>/2018/09/06/performanceance-tuning05/</url>
      <content type="html"><![CDATA[<p>psi-probe 是一款非常强大的开源 Tomcat 监控工具，使用时可以点击<a href="https://github.com/psi-probe/psi-probe/releases" target="_blank" rel="noopener">这里</a>下载</p>
<p>配置用户：</p>
<p>在 tomcat/webapps/docs/deployer-howto.html 文档的 manager 下有说明</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conf/tomcat-user.xml</span><br></pre></td></tr></table></figure>
<p>1、添加用户<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;role rolename=&quot;ahian&quot;/&gt;</span><br><span class="line">&lt;role rolename=&quot;manager-gui&quot;/&gt;</span><br><span class="line">&lt;role rolename=&quot;manager-status&quot;/&gt;</span><br><span class="line">&lt;user username=&quot;ahian&quot; password=&quot;123456&quot; roles=&quot;ahian,manager-gui,manager-status&quot;/&gt;</span><br></pre></td></tr></table></figure></p>
<p>2、在 conf 文件夹中新建 Catalina/localhost/manager.xml 并编辑<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line">	<span class="tag">&lt;<span class="name">Context</span> <span class="attr">privileged</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">	  <span class="attr">antiResourceLocking</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">	  <span class="attr">docBase</span>=<span class="string">"$&#123;catalina.home&#125;/webapps/manager"</span></span></span><br><span class="line"><span class="tag">		&gt;</span></span><br><span class="line">	         <span class="tag">&lt;<span class="name">Valve</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.valves.RemoteAddrValve"</span></span></span><br><span class="line"><span class="tag">	                <span class="attr">allow</span>=<span class="string">"127\.0\.0\.1"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">Context</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>3、将 probe.war 包拷贝到 webapp 下，启动 tomcat<br>4、访问 localhost:8080/probe</p>
]]></content>
      
        <categories>
            
            <category> 架构 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 性能调优 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Tomcat 远程 Debug]]></title>
      <url>/2018/09/04/performanceance-tuning04/</url>
      <content type="html"><![CDATA[<h3 id="JDWP-协议介绍"><a href="#JDWP-协议介绍" class="headerlink" title="JDWP 协议介绍"></a>JDWP 协议介绍</h3><p>JDWP 是 Java Debug Wire Protocol 的缩写，它定义了调试器（debugger）和被调试的 Java 虚拟机（target vm）之间的通信协议。<br>详请参考<a href="https://www.ibm.com/developerworks/cn/java/j-lo-jpda3/" target="_blank" rel="noopener">此文</a>。</p>
<h3 id="远程-Tomcat-服务器配置"><a href="#远程-Tomcat-服务器配置" class="headerlink" title="远程 Tomcat 服务器配置"></a>远程 Tomcat 服务器配置</h3><h4 id="修改启动文件"><a href="#修改启动文件" class="headerlink" title="修改启动文件"></a>修改启动文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi bin/startup.sh</span><br></pre></td></tr></table></figure>
<p>在启动命令中添加启动参数 jpda<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exec &quot;$PRGDIR&quot;/&quot;$EXECTABLE&quot; jpda start &quot;$@&quot;</span><br></pre></td></tr></table></figure></p>
<h4 id="修改-catalina-文件（主要配置）"><a href="#修改-catalina-文件（主要配置）" class="headerlink" title="修改 catalina 文件（主要配置）"></a>修改 catalina 文件（主要配置）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi bin/catalina.sh</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$1</span>"</span> = <span class="string">"jpda"</span> ] ; <span class="keyword">then</span></span><br><span class="line">  <span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$JPDA_TRANSPORT</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">    JPDA_TRANSPORT=<span class="string">"dt_socket"</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">  <span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$JPDA_ADDRESS</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">    JPDA_ADDRESS=<span class="string">"localhost:8000"</span>//这里是要修改的</span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">  <span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$JPDA_SUSPEND</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">    JPDA_SUSPEND=<span class="string">"n"</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">  <span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$JPDA_OPTS</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">    JPDA_OPTS=<span class="string">"-agentlib:jdwp=transport=<span class="variable">$JPDA_TRANSPORT</span>,address=<span class="variable">$JPDA_ADDRESS</span>,server=y,suspend=<span class="variable">$JPDA_SUSPEND</span>"</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">  CATALINA_OPTS=<span class="string">"<span class="variable">$JPDA_OPTS</span> <span class="variable">$CATALINA_OPTS</span>"</span></span><br><span class="line">  <span class="built_in">shift</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<p>done</p>
<h3 id="项目代码配置"><a href="#项目代码配置" class="headerlink" title="项目代码配置"></a>项目代码配置</h3><p>将项目文件打成 War 包 ， 如果是 SpringBoot 项目的话可以使用下面的打包方式：<br>1、Pom 文件将打包方式改成 war 启动类<br>2、启动类修改<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestApplication</span> <span class="keyword">extends</span> <span class="title">SpringBootServletInitializer</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> SpringApplicationBuilder <span class="title">configure</span><span class="params">(SpringApplicationBuilder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> builder.sources(TestApplication.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(TestApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>3、mvn build/package</p>
<h3 id="编辑器远程调试"><a href="#编辑器远程调试" class="headerlink" title="编辑器远程调试"></a>编辑器远程调试</h3><ul>
<li>Eclipse：Debug Configurations-&gt;Remote Java Application</li>
<li>IDEA：Run -&gt; Edit Configuration -&gt; add -&gt; remote</li>
</ul>
<p>配置好 host 和 port 就可以打断点进行调试了。</p>
]]></content>
      
        <categories>
            
            <category> 架构 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 性能调优 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[jstack 死循环和死锁定位]]></title>
      <url>/2018/09/03/performanceance-tuning03/</url>
      <content type="html"><![CDATA[<p>jstack 是用来查看线程的命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jstack [option] &lt;pid&gt;</span><br></pre></td></tr></table></figure></p>
<p>先来看看线程的状态(<a href="https://docs.oracle.com/javase/8/docs/technotes/guides/troubleshoot/tooldescr034.html#sthref31" target="_blank" rel="noopener">官方文档</a>)</p>
<ul>
<li>New</li>
<li>Runnable</li>
<li>Blocked</li>
<li>Waiting</li>
<li>Timed_Waiting</li>
<li>Terminated</li>
</ul>
<p>下面是 java 线程状态转化<br><img src="http://owxzmw7bm.bkt.clouddn.com/thread.jpg" alt></p>
<p>代码模拟<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CpuController</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 死循环</span></span><br><span class="line"><span class="comment">	 * */</span></span><br><span class="line">	<span class="meta">@RequestMapping</span>(<span class="string">"/loop"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> List&lt;Long&gt; <span class="title">loop</span><span class="params">()</span></span>&#123;</span><br><span class="line">		String data = <span class="string">"&#123;\"data\":[&#123;\"partnerid\":]"</span>;</span><br><span class="line">		<span class="keyword">return</span> getPartneridsFromJson(data);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> Object lock1 = <span class="keyword">new</span> Object();</span><br><span class="line">	<span class="keyword">private</span> Object lock2 = <span class="keyword">new</span> Object();</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 死锁</span></span><br><span class="line"><span class="comment">	 * */</span></span><br><span class="line">	<span class="meta">@RequestMapping</span>(<span class="string">"/deadlock"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">deadlock</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">			<span class="keyword">synchronized</span>(lock1) &#123;</span><br><span class="line">				<span class="keyword">try</span> &#123;Thread.sleep(<span class="number">1000</span>);&#125;<span class="keyword">catch</span>(Exception e) &#123;&#125;</span><br><span class="line">				<span class="keyword">synchronized</span>(lock2) &#123;</span><br><span class="line">					System.out.println(<span class="string">"Thread1 over"</span>);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;) .start();</span><br><span class="line">		<span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">			<span class="keyword">synchronized</span>(lock2) &#123;</span><br><span class="line">				<span class="keyword">try</span> &#123;Thread.sleep(<span class="number">1000</span>);&#125;<span class="keyword">catch</span>(Exception e) &#123;&#125;</span><br><span class="line">				<span class="keyword">synchronized</span>(lock1) &#123;</span><br><span class="line">					System.out.println(<span class="string">"Thread2 over"</span>);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;) .start();</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"deadlock"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Long&gt; <span class="title">getPartneridsFromJson</span><span class="params">(String data)</span></span>&#123;  </span><br><span class="line">	    <span class="comment">//&#123;\"data\":[&#123;\"partnerid\":982,\"count\":\"10000\",\"cityid\":\"11\"&#125;,&#123;\"partnerid\":983,\"count\":\"10000\",\"cityid\":\"11\"&#125;,&#123;\"partnerid\":984,\"count\":\"10000\",\"cityid\":\"11\"&#125;]&#125;  </span></span><br><span class="line">	    <span class="comment">//上面是正常的数据  </span></span><br><span class="line">	    List&lt;Long&gt; list = <span class="keyword">new</span> ArrayList&lt;Long&gt;(<span class="number">2</span>);  </span><br><span class="line">	    <span class="keyword">if</span>(data == <span class="keyword">null</span> || data.length() &lt;= <span class="number">0</span>)&#123;  </span><br><span class="line">	        <span class="keyword">return</span> list;  </span><br><span class="line">	    &#125;      </span><br><span class="line">	    <span class="keyword">int</span> datapos = data.indexOf(<span class="string">"data"</span>);  </span><br><span class="line">	    <span class="keyword">if</span>(datapos &lt; <span class="number">0</span>)&#123;  </span><br><span class="line">	        <span class="keyword">return</span> list;  </span><br><span class="line">	    &#125;  </span><br><span class="line">	    <span class="keyword">int</span> leftBracket = data.indexOf(<span class="string">"["</span>,datapos);  </span><br><span class="line">	    <span class="keyword">int</span> rightBracket= data.indexOf(<span class="string">"]"</span>,datapos);  </span><br><span class="line">	    <span class="keyword">if</span>(leftBracket &lt; <span class="number">0</span> || rightBracket &lt; <span class="number">0</span>)&#123;  </span><br><span class="line">	        <span class="keyword">return</span> list;  </span><br><span class="line">	    &#125;  </span><br><span class="line">	    String partners = data.substring(leftBracket+<span class="number">1</span>,rightBracket);  </span><br><span class="line">	    <span class="keyword">if</span>(partners == <span class="keyword">null</span> || partners.length() &lt;= <span class="number">0</span>)&#123;  </span><br><span class="line">	        <span class="keyword">return</span> list;  </span><br><span class="line">	    &#125;  </span><br><span class="line">	    <span class="keyword">while</span>(partners!=<span class="keyword">null</span> &amp;&amp; partners.length() &gt; <span class="number">0</span>)&#123;  </span><br><span class="line">	        <span class="keyword">int</span> idpos = partners.indexOf(<span class="string">"partnerid"</span>);  </span><br><span class="line">	        <span class="keyword">if</span>(idpos &lt; <span class="number">0</span>)&#123;  </span><br><span class="line">	            <span class="keyword">break</span>;  </span><br><span class="line">	        &#125;  </span><br><span class="line">	        <span class="keyword">int</span> colonpos = partners.indexOf(<span class="string">":"</span>,idpos);  </span><br><span class="line">	        <span class="keyword">int</span> commapos = partners.indexOf(<span class="string">","</span>,idpos);  </span><br><span class="line">	        <span class="keyword">if</span>(colonpos &lt; <span class="number">0</span> || commapos &lt; <span class="number">0</span>)&#123;  </span><br><span class="line">	            <span class="comment">//partners = partners.substring(idpos+"partnerid".length());//1  </span></span><br><span class="line">	            <span class="keyword">continue</span>;</span><br><span class="line">	        &#125;  </span><br><span class="line">	        String pid = partners.substring(colonpos+<span class="number">1</span>,commapos);  </span><br><span class="line">	        <span class="keyword">if</span>(pid == <span class="keyword">null</span> || pid.length() &lt;= <span class="number">0</span>)&#123;  </span><br><span class="line">	            <span class="comment">//partners = partners.substring(idpos+"partnerid".length());//2  </span></span><br><span class="line">	            <span class="keyword">continue</span>;</span><br><span class="line">	        &#125;  </span><br><span class="line">	        <span class="keyword">try</span>&#123;  </span><br><span class="line">	            list.add(Long.parseLong(pid));  </span><br><span class="line">	        &#125;<span class="keyword">catch</span>(Exception e)&#123;  </span><br><span class="line">	            <span class="comment">//do nothing  </span></span><br><span class="line">	        &#125;  </span><br><span class="line">	        partners = partners.substring(commapos);  </span><br><span class="line">	    &#125;  </span><br><span class="line">	    <span class="keyword">return</span> list;  </span><br><span class="line">	&#125;  </span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="死循环定位"><a href="#死循环定位" class="headerlink" title="死循环定位"></a>死循环定位</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">top </span><br><span class="line">jstack &lt;pid&gt; &gt; result.txt <span class="comment">#将结果追加到 txt 文件</span></span><br></pre></td></tr></table></figure>
<p>负载过大会导致无法访问，使用 top 命名找到占用 cpu 最多的那个进程，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">top -p &lt;pid&gt; -H #打印所有的线程</span><br><span class="line">printf &quot;%x&quot; &lt;pid&gt; 将十进制的 pid 转换成 十六进制</span><br><span class="line">找到线程对应的 pid</span><br></pre></td></tr></table></figure></p>
<h3 id="死锁定位"><a href="#死锁定位" class="headerlink" title="死锁定位"></a>死锁定位</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jps <span class="_">-l</span> <span class="comment">#或者 ps -ef | grep java</span></span><br><span class="line">jstack &lt;pid&gt; &gt; result.txt</span><br></pre></td></tr></table></figure>
<p>如果有死锁则会在文件末尾出现提示。</p>
]]></content>
      
        <categories>
            
            <category> 架构 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 性能调优 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[jmap & mat 内存溢出]]></title>
      <url>/2018/09/02/performanceance-tuning02/</url>
      <content type="html"><![CDATA[<h3 id="模拟内存溢出"><a href="#模拟内存溢出" class="headerlink" title="模拟内存溢出"></a>模拟内存溢出</h3><p><img src="http://owxzmw7bm.bkt.clouddn.com/jvm.png" alt><br> S0 和 S1 同时只会有一个使用，另一个是空的。<br>Metaspace 中主要存放 class 和 methods 等</p>
<p>模拟溢出的环境<br>堆内存溢出：通过不断地创建对象来将堆内存填充满<br>非堆内存溢出：通过继承 ClassLoader 配合 asm 工具来动态的创建类，直到将非堆内存填充满。这个代码可以<a href="https://gist.github.com/AhianZhang/c4c2c4ee6fb7a82190ac157c3bc606db" target="_blank" rel="noopener">点击这里查看</a></p>
<p>将启动的 VM 参数调小，方便快速实现效果。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemoryController</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> List&lt;User&gt;  userList = <span class="keyword">new</span> ArrayList&lt;User&gt;();</span><br><span class="line">	<span class="keyword">private</span> List&lt;Class&lt;?&gt;&gt;  classList = <span class="keyword">new</span> ArrayList&lt;Class&lt;?&gt;&gt;();</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * -Xmx32M -Xms32M</span></span><br><span class="line"><span class="comment">	 * */</span></span><br><span class="line">	<span class="meta">@GetMapping</span>(<span class="string">"/heap"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">heap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">			userList.add(<span class="keyword">new</span> User(i++, UUID.randomUUID().toString()));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * -XX:MetaspaceSize=32M -XX:MaxMetaspaceSize=32M</span></span><br><span class="line"><span class="comment">	 * */</span></span><br><span class="line">	<span class="meta">@GetMapping</span>(<span class="string">"/nonheap"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">nonheap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">			classList.addAll(Metaspace.createClasses());</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出的异常分别为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread &quot;http-nio-8080-exec-2&quot; java.lang.OutOfMemoryError: GC overhead limit exceeded</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread &quot;http-nio-8080-exec-2&quot; Exception in thread &quot;http-nio-8080-exec-1&quot; java.lang.OutOfMemoryError: Metaspace</span><br><span class="line">java.lang.OutOfMemoryError: Metaspace</span><br><span class="line">Exception in thread &quot;ContainerBackgroundProcessor[StandardEngine[Tomcat]]&quot; java.lang.OutOfMemoryError: Metaspace</span><br></pre></td></tr></table></figure>
<h3 id="导出内存映像文件"><a href="#导出内存映像文件" class="headerlink" title="导出内存映像文件"></a>导出内存映像文件</h3><p>C++ 内存泄漏是指 new 一个对象后指针丢失了，导致整个对象无法被回收，Java是指 new 了以后一直被占有没被释放。</p>
<h4 id="内存溢出自动导出"><a href="#内存溢出自动导出" class="headerlink" title="内存溢出自动导出"></a>内存溢出自动导出</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-XX:+HeapDumpOnOutOfMemoryError</span><br><span class="line">-XX:HeapDumpPath=./</span><br></pre></td></tr></table></figure>
<h4 id="使用-jmap-命令手动导出"><a href="#使用-jmap-命令手动导出" class="headerlink" title="使用 jmap 命令手动导出"></a>使用 jmap 命令手动导出</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jmap -dump:format=b,file=heap.hprof pid</span><br></pre></td></tr></table></figure>
<p>有时内存大的时候有可能无法自定导出，这是就需要使用 jmap 手动导出</p>
<h4 id="使用-mat-工具进行分析"><a href="#使用-mat-工具进行分析" class="headerlink" title="使用 mat 工具进行分析"></a>使用 mat 工具进行分析</h4><p>mat 是 eclipse 基金会下面的一款内存分析工具。可以从官网上下载。<br>运行 mat.exe 导入之前的 heap.hprof 文件，首页的 overview 一目了然不用过多解释，下面是常用的操作</p>
<p><img src="http://owxzmw7bm.bkt.clouddn.com/mat.png" alt> </p>
<p>在需要查看的对象上右键 merge shortest path to gc roots-&gt;exclude all phantom/week/soft,etc. reference<br>去掉所有的虚引用只留下强引用，此时会很容易排查.</p>
<p>通过上面的方式基本上就能定位到致内存溢出的对象。</p>
]]></content>
      
        <categories>
            
            <category> 架构 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 性能调优 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JVM 常用参数查看]]></title>
      <url>/2018/09/02/performanceance-tuning01/</url>
      <content type="html"><![CDATA[<h3 id="JVM-参数"><a href="#JVM-参数" class="headerlink" title="JVM 参数"></a>JVM 参数</h3><ul>
<li>标准参数</li>
<li>-X 参数</li>
<li>-XX 参数  </li>
</ul>
<h4 id="标准参数"><a href="#标准参数" class="headerlink" title="标准参数"></a>标准参数</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-help</span><br><span class="line">-server</span><br><span class="line">-client</span><br><span class="line">-version </span><br><span class="line">-showversion</span><br><span class="line">-cp</span><br><span class="line">-classpath</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<h4 id="X-参数"><a href="#X-参数" class="headerlink" title="X 参数"></a>X 参数</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-Xint:解释执行</span><br><span class="line">-Xcomp：第一次使用就编译成本地代码(速度比慢)</span><br><span class="line">-Xmixed：混合模式，JVM 自己决定是否编译成本地代码</span><br></pre></td></tr></table></figure>
<p>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">java -Xint - version</span><br><span class="line">----------------------</span><br><span class="line">output:</span><br><span class="line">java version &quot;1.8.0_121&quot;</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_121-b13)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.121-b13, interpreted mode)</span><br></pre></td></tr></table></figure></p>
<h4 id="XX-参数"><a href="#XX-参数" class="headerlink" title="XX 参数"></a>XX 参数</h4><h5 id="Boolean类型"><a href="#Boolean类型" class="headerlink" title="Boolean类型"></a>Boolean类型</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-XX:[+-]&lt;name&gt; <span class="comment">#表示启用或者禁用 name 属性</span></span><br></pre></td></tr></table></figure>
<p>举例：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-XX:+UserConcMarkSweepGC <span class="comment">#启用 CMS 垃圾收集器</span></span><br><span class="line">-XX:+UserG1GC <span class="comment">#启用了 G1 垃圾收集器</span></span><br></pre></td></tr></table></figure></p>
<h5 id="Key-Value-类型"><a href="#Key-Value-类型" class="headerlink" title="Key-Value 类型"></a>Key-Value 类型</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-XX:&lt;name&gt;=&lt;value&gt; <span class="comment">#表示 name 属性的值是 value</span></span><br></pre></td></tr></table></figure>
<p>举例：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-XX:MaxGCPauseMillis=500 <span class="comment">#最大停顿时间</span></span><br><span class="line">-XX:GCTimeRatio=19</span><br></pre></td></tr></table></figure></p>
<h5 id="Xmx-最大内存-Xms-最小内存"><a href="#Xmx-最大内存-Xms-最小内存" class="headerlink" title="-Xmx(最大内存) -Xms(最小内存)"></a>-Xmx(最大内存) -Xms(最小内存)</h5><p>-Xmx &lt;=&gt; -XX:MaxHeapSize<br>-Xms &lt;=&gt; -XX:InitialHeapSize</p>
<h4 id="JVM-运行时参数"><a href="#JVM-运行时参数" class="headerlink" title="JVM 运行时参数"></a>JVM 运行时参数</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-XX:+PrintFlagsInitial <span class="comment">#查看初始值</span></span><br><span class="line">-XX:+PrintFlagsFinal <span class="comment">#查看最终值</span></span><br><span class="line">-XX:+UnlockExperimentalVMOptions <span class="comment">#解锁实验性参数</span></span><br><span class="line">-XX:+UnlockDiagnosticVMOptions <span class="comment">#解锁诊断参数</span></span><br><span class="line">-XX:+PrintCommandLineFlags <span class="comment">#打印命令行参数</span></span><br></pre></td></tr></table></figure>
<p>结果中的 <code>=</code> 表示默认值； <code>:=</code> 被用户修改后的 JVM 的值。</p>
<h3 id="查看参数的指令"><a href="#查看参数的指令" class="headerlink" title="查看参数的指令"></a>查看参数的指令</h3><h4 id="jps-查看-Java-进程"><a href="#jps-查看-Java-进程" class="headerlink" title="jps 查看 Java 进程"></a>jps 查看 Java 进程</h4><p>使用 <code>jps -l</code>命令查看进程号和具体的 Java 程序</p>
<h4 id="jinfo-查看进程内的某个参数的值"><a href="#jinfo-查看进程内的某个参数的值" class="headerlink" title="jinfo 查看进程内的某个参数的值"></a>jinfo 查看进程内的某个参数的值</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jinfo -flag &lt;name&gt; pid</span><br><span class="line">jinfo -flags &lt;name&gt; pid <span class="comment">#打印非默认值</span></span><br></pre></td></tr></table></figure>
<h4 id="jstat-查看-JVM-统计信息"><a href="#jstat-查看-JVM-统计信息" class="headerlink" title="jstat 查看 JVM 统计信息"></a>jstat 查看 JVM 统计信息</h4><p>类加载、垃圾收集、JIT 编译<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-class</span><br><span class="line">-gc ...</span><br><span class="line">-compiler</span><br></pre></td></tr></table></figure></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jstat -gc 32144 1000 10 <span class="comment">#每隔1000ms打印一次，打印十次</span></span><br></pre></td></tr></table></figure>
<p>-gc输出的结果</p>
<ul>
<li>S0C S1C S0U S1U : S0 和 S1 的总量和使用量</li>
<li>EC EU ： Eden 区总量与使用量</li>
<li>OC OU ： Old 区总量与使用量</li>
<li>MC MU ： Metaspace 区总量与使用量</li>
<li>CCSC CCSU ： 压缩类空间总量与使用量</li>
<li>YGC YGCT ：YoungGC 的次数与时间</li>
<li>FGC FGCT ： FullGC 的次数与时间</li>
<li>GCT ：总的 GC 时间  </li>
</ul>
]]></content>
      
        <categories>
            
            <category> 架构 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 性能调优 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[周总结(8.13-8.19)]]></title>
      <url>/2018/08/20/summary07/</url>
      <content type="html"><![CDATA[<p>完成 jmeter 的 PPT 整理<br>主要学习<strong>缓存</strong>方面的内容，在近期会整理成文章。<br>学习 julia 争取成为 Julia 的布道者</p>
]]></content>
      
        <categories>
            
            <category> 总结 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 工作总结 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[周总结（7.30-8.4）]]></title>
      <url>/2018/08/04/summary06/</url>
      <content type="html"><![CDATA[<p>月末月初，总的来说这一周过得很匆忙，30号下午到的北京，31号体检，1号入职，这时已经是周三了，花了几个小时把环境搭好，熟悉了工作环境，和那层楼的保安比较熟，因为差不多算是老乡，在外打拼都挺不易的，同事对工作都很热情，水平都很高，注重底层的知识，头一次见到大早上一群人讨论 HashMap 和 多线程的知识。我的规划是用一年的时间去学习三年的知识，我在等待时机，一个能让我完成理想的时机。</p>
]]></content>
      
        <categories>
            
            <category> 总结 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 工作总结 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用移位运算符]]></title>
      <url>/2018/05/26/shift-operator/</url>
      <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">middle = (L+R)/2</span><br><span class="line">这样的写法 L+R 有可能溢出</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">  middle = L + (R-L)/2</span><br><span class="line">=&gt;minddle = L + (R-L)&gt;&gt;1</span><br></pre></td></tr></table></figure>
<p>这样写的好处是不会发生数据溢出，除以 2 则是向右移一位，位运算比算术运算快</p>
]]></content>
      
        <categories>
            
            <category> 算法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[master 公式]]></title>
      <url>/2018/05/26/algorithm-master-formula/</url>
      <content type="html"><![CDATA[<p><strong>master公式</strong></p>
<hr>
<p>T(N) = a*T(N/b) + O(N<sup>d</sup>)</p>
<hr>
<p>N：样本量<br>T：时间复杂度<br>a：样本量发生的次数<br>b：将样本量进行分治<br>c：执行子过程之外其余过程的时间复杂度</p>
<p><strong>用途</strong>：计算递归算法的时间复杂度</p>
<p><strong>快速计算</strong></p>
<ul>
<li>log<sub>b</sub>a &gt; d -&gt; 复杂度为O(N<sup>log<sub>b</sub>a</sup>) </li>
<li>log<sub>b</sub>a = d -&gt; 复杂度为O(N<sup>d</sup> * logN) </li>
<li>log<sub>b</sub>a &lt; d -&gt; 复杂度为O(N<sup>d</sup>)</li>
</ul>
<p><strong>适用范围</strong><br>递归调用使，划分的子过程规模一样，<br>奇数问题：递归不看常数</p>
<p>任何递归行为都可以变成非递归<br>递归的本质是 压栈</p>
]]></content>
      
        <categories>
            
            <category> 算法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[VMware 12 NAT网络下配置 ubuntu 16.04 LTS 系统静态 IP]]></title>
      <url>/2018/05/09/ubuntu-nat-static-ip-config/</url>
      <content type="html"><![CDATA[<p>镜像是 ubuntu 16.04 server 版，主机是 Windows10 系统，因为要搭建 Hadoop 集群，所以配置一下，将此配置流程在此记录，方便查找。</p>
<h3 id="查看主机-IP"><a href="#查看主机-IP" class="headerlink" title="查看主机 IP"></a>查看主机 IP</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipconfig</span><br></pre></td></tr></table></figure>
<p>系统分配给虚拟机使用的网卡是 VMnet8，其内容如下：<br><img src="http://image.younge.group/20180509211132.png" alt></p>
<p>如果有这块网卡则说明出于开启状态</p>
<h3 id="查看-VMware-的虚拟网络选项"><a href="#查看-VMware-的虚拟网络选项" class="headerlink" title="查看 VMware 的虚拟网络选项"></a>查看 VMware 的虚拟网络选项</h3><p><img src="http://image.younge.group/20180509211424.png" alt></p>
<p>子网 ip 最后以 0 结尾，这个术语叫什么不知道，网关 ip 以 2 结尾<br>例如： 子网 ip ：192.168.137.0   网关： 192.168.137.2<br>必须保证其在一个网段以内。</p>
<h3 id="修改-Ubuntu-内的配置"><a href="#修改-Ubuntu-内的配置" class="headerlink" title="修改 Ubuntu 内的配置"></a>修改 Ubuntu 内的配置</h3><h4 id="查看系统分配的网卡名称"><a href="#查看系统分配的网卡名称" class="headerlink" title="查看系统分配的网卡名称"></a>查看系统分配的网卡名称</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig -a</span><br></pre></td></tr></table></figure>
<p>有的可能是 eth0 有的可能是 ens33，我的是 ens33</p>
<h4 id="配置网卡"><a href="#配置网卡" class="headerlink" title="配置网卡"></a>配置网卡</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/network/interfaces</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">auto ens33</span><br><span class="line">iface ens33 inet static</span><br><span class="line">address 192.168.137.155 <span class="comment">#这个ip一般是128~255</span></span><br><span class="line">network 255.255.255.0</span><br><span class="line">gateway 192.168.137.2</span><br></pre></td></tr></table></figure>
<p><img src="http://image.younge.group/20180509212747.png" alt><br>添加 DNS 解析</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo  vim /etc/resolvconf/resolvconf.d/head</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nameserver 144.144.144.144</span><br><span class="line">nameserver 8.8.8.8</span><br><span class="line">nameserver 1.1.1.1</span><br></pre></td></tr></table></figure>
<h3 id="重启-network-服务"><a href="#重启-network-服务" class="headerlink" title="重启 network 服务"></a>重启 network 服务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /etc/init.d/networking restart</span><br></pre></td></tr></table></figure>
<h3 id="重启服务器"><a href="#重启服务器" class="headerlink" title="重启服务器"></a>重启服务器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo reboot</span><br></pre></td></tr></table></figure>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>ping www.baidu.com 收到数据，无丢包</p>
]]></content>
      
        <categories>
            
            <category> 架构 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> nat </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关于进制的计算]]></title>
      <url>/2018/03/25/code01/</url>
      <content type="html"><![CDATA[<h3 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h3><p>进制包括 二进制 八进制 十进制 十六进制</p>
<h4 id="二进制-BIN-转十进制-DEC"><a href="#二进制-BIN-转十进制-DEC" class="headerlink" title="二进制(BIN)转十进制(DEC)"></a>二进制(BIN)转十进制(DEC)</h4><p>将二进制数按权展开相加得十进制数<br>举例：10010 的十进制为 18<br><img src="http://owxvt4jui.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20180325163222.jpg" alt></p>
<h4 id="十进制-DEC-转二进制-BIN"><a href="#十进制-DEC-转二进制-BIN" class="headerlink" title="十进制(DEC)转二进制(BIN)"></a>十进制(DEC)转二进制(BIN)</h4><p>除 2 取余，逆序排列。<br>举例： 666 的二进制为 1010011010<br><img src="http://owxvt4jui.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20180325163207.jpg" alt></p>
<h4 id="二进制-BIN-转八进制-OCT"><a href="#二进制-BIN-转八进制-OCT" class="headerlink" title="二进制(BIN)转八进制(OCT)"></a>二进制(BIN)转八进制(OCT)</h4><p>从右向左，每三位二进制数为一组按权展开相加，不足补 0<br>举例：10010 的八进制为 22<br><img src="http://owxvt4jui.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20180325163232.jpg" alt></p>
<h4 id="八进制-OCT-转二进制-BIN"><a href="#八进制-OCT-转二进制-BIN" class="headerlink" title="八进制(OCT)转二进制(BIN)"></a>八进制(OCT)转二进制(BIN)</h4><p>将每位八进制数除二取余得到三位二进制数，不足时每位最左面补0<br>举例：63 的二进制位 110011<br><img src="http://owxvt4jui.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20180325163211.jpg" alt></p>
<h4 id="二进制-BIN-转十六进制-HEX"><a href="#二进制-BIN-转十六进制-HEX" class="headerlink" title="二进制(BIN)转十六进制(HEX)"></a>二进制(BIN)转十六进制(HEX)</h4><p>与八进制类似，十六进制为取四合一，从右到左转换，不足时补0<br>A B C D E F 代表 10-15，遇到以 0x 开头的代表后面的数为十六进制数<br>举例：100110 的十六进制为 26 或者 0x26<br><img src="http://owxvt4jui.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20180325163214.jpg" alt></p>
<h4 id="十六进制-HEX-转二进制-BIN"><a href="#十六进制-HEX-转二进制-BIN" class="headerlink" title="十六进制(HEX)转二进制(BIN)"></a>十六进制(HEX)转二进制(BIN)</h4><p>对每个十六进制数除二取余，每组得到 4 个二进制，不足时左面补 0<br>举例： 0xBB3 的二进制数为：101110110011<br><img src="http://owxvt4jui.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20180325163228.jpg" alt></p>
<h4 id="十进制转八进制或十六进制"><a href="#十进制转八进制或十六进制" class="headerlink" title="十进制转八进制或十六进制"></a>十进制转八进制或十六进制</h4><p>除 8 或者 16 取余<br>举例： 2996 的八进制为：5664<br><img src="http://owxvt4jui.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20180325163159.jpg" alt></p>
<h4 id="八进制或者十六进制转十进制"><a href="#八进制或者十六进制转十进制" class="headerlink" title="八进制或者十六进制转十进制"></a>八进制或者十六进制转十进制</h4><p>将八进制或者十六进制按权展开并相加<br>举例：0xBB3 的十进制为 2996<br><img src="http://owxvt4jui.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20180325163219.jpg" alt></p>
<h4 id="负数情况"><a href="#负数情况" class="headerlink" title="负数情况"></a>负数情况</h4><h5 id="负的十进制转二进制"><a href="#负的十进制转二进制" class="headerlink" title="负的十进制转二进制"></a>负的十进制转二进制</h5><p>以上都是基于正整数的情况下，如果是如果十进制为<strong>负数</strong>的情况下，则需要按照<code>转换二进制，按位取反尾数加 1</code>的原则进行转换。相当于计算补码。<br>举例：-22(10) 的二进制为：11101010;如果是 16 位的 -22 其二进制在左侧加上 8 个 1<br><img src="http://owxvt4jui.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20180325195414.jpg" alt></p>
<h5 id="负数的二进制转十进制"><a href="#负数的二进制转十进制" class="headerlink" title="负数的二进制转十进制"></a>负数的二进制转十进制</h5><p>逆向逻辑推，<code>先减去 1 ，取反，正常计算</code>，对于如何看出二进制的数是否有符号位(相对于十进制来说),观察其最高位是否为 1(不满8位前面补0，超8 位前面补0变成16位 根据$2^n$来计算), 如果为 1 则此数为有符号位，即负数，如果为 0 则为正数。<br>举例：10101001的十进制为 -87<br><img src="http://owxvt4jui.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20180325203700.jpg" alt></p>
]]></content>
      
        <categories>
            
            <category> 算法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[项目总结 第三篇]]></title>
      <url>/2018/02/11/summary05/</url>
      <content type="html"><![CDATA[<p>春节将至，项目还是滞后了，功能基本上全部实现就差细节优化了，今天非常困，眼都睁不开了，今天整理整理项目中用到的东西</p>
<ul>
<li>图片上传 使用 thumbnail 进行图片的压缩和加水印，文件上传使用表单提交会很快，需要注意的是在后台接收参数 RequestParam() 时候要注意与前台所传递的 name 值对应,否则可能会报错。</li>
<li>JQuery 的 DOM 和 BOM 处理 ，注意 sibling 和 delegate 以及事件绑定等问题</li>
<li>数据分类查询时传递多个参数时比如商品分类 需要传递 cateId1 和 cateId2 进行数据的查询，在 DAO 层使用注解 @Param 进行参数指名。</li>
<li>有些频繁更换的内容，比如图片和列表，此时可以选择使用拼接字符串，在后台拼接可以坚守前端代码量，在前台拼接更灵活，有多种写法，可以使用 ResponseBody 进行响应，也可以使用 ObjectMapper 将 List 集合转换成字符串。</li>
<li>MyBatis的分页插件 pageHelper 目前只会 model 携带参数返回到视图层。</li>
<li>在写 增删改查时尽量写出通用方法，减少代码量，业务尽量写在 Service 层。</li>
<li>数据库查询语句，Group By Having 。。。 </li>
</ul>
]]></content>
      
        <categories>
            
            <category> 总结 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 项目总结 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[项目总结 第二篇]]></title>
      <url>/2018/01/30/summary04/</url>
      <content type="html"><![CDATA[<p>button 的 onclick 时间绑定 submitData 利用 AJAX  进行数据传输</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">submitData</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> url=<span class="string">"&lt;%=request.getContextPath()%&gt;/updateGoodsCat.do"</span>;</span><br><span class="line">    <span class="keyword">var</span> catId=$(<span class="string">"#catId"</span>).val();</span><br><span class="line">    <span class="keyword">var</span> name=$(<span class="string">"#name"</span>).val();</span><br><span class="line">    <span class="keyword">var</span> title=$(<span class="string">"#title"</span>).val();</span><br><span class="line">    <span class="keyword">var</span> pid=$(<span class="string">"#pid"</span>).val();</span><br><span class="line">    <span class="keyword">var</span> comments=$(<span class="string">"#comments"</span>).val();</span><br><span class="line">    <span class="keyword">var</span> params=&#123;</span><br><span class="line">        <span class="string">"catId"</span>:catId,</span><br><span class="line">        <span class="string">"name"</span>:name,</span><br><span class="line">        <span class="string">"title"</span>:title,</span><br><span class="line">        <span class="string">"pid"</span>:pid,</span><br><span class="line">        <span class="string">"comments"</span>:comments,&#125;;</span><br><span class="line">    $.post(url,params,<span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</span><br><span class="line">       <span class="comment">// alert(result);</span></span><br><span class="line">        <span class="comment">//window.location.reload();</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当 时间为 AJAXSubmit 时 </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#radio1"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">"#isShow"</span>).val($(<span class="string">"#radio1"</span>).val());</span><br><span class="line">&#125;);</span><br><span class="line">$(<span class="string">"#radio2"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">"#isShow"</span>).val($(<span class="string">"#radio2"</span>).val());</span><br><span class="line">&#125;)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">submitData</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> title1=$(<span class="string">"#title1"</span>).val();</span><br><span class="line">    <span class="keyword">var</span> title2=$(<span class="string">"#title2"</span>).val();</span><br><span class="line">    <span class="keyword">var</span> cateId=$(<span class="string">"#cateId"</span>).combotree(<span class="string">'getValue'</span>);</span><br><span class="line">    <span class="keyword">var</span> author=$(<span class="string">"#author"</span>).val();</span><br><span class="line">    <span class="built_in">console</span>.log(cateId);</span><br><span class="line">    <span class="keyword">var</span> content = UE.getEditor(<span class="string">'container'</span>).getContent();</span><br><span class="line">    <span class="keyword">var</span> stemFrom=$(<span class="string">"#stemFrom"</span>).val();</span><br><span class="line">    <span class="keyword">var</span> amount=$(<span class="string">"#amount"</span>).val();</span><br><span class="line">    <span class="keyword">var</span> isShow = $(<span class="string">"#isShow"</span>).val();</span><br><span class="line">    <span class="keyword">var</span> params=&#123;</span><br><span class="line">        <span class="string">"title1"</span>:title1,</span><br><span class="line">        <span class="string">"title2"</span>:title2,</span><br><span class="line">        <span class="string">"cateId"</span>:cateId,</span><br><span class="line">        <span class="string">"author"</span>:author,</span><br><span class="line">        <span class="string">"content"</span>:content,</span><br><span class="line">        <span class="string">"stemFrom"</span>:stemFrom,</span><br><span class="line">        <span class="string">"amount"</span>:amount,</span><br><span class="line">        <span class="string">"isShow"</span>:isShow</span><br><span class="line">    &#125;;</span><br><span class="line">    $(<span class="string">"#form1"</span>).ajaxSubmit(&#123;</span><br><span class="line">        type:<span class="string">"post"</span>,</span><br><span class="line">        url:<span class="string">"&lt;%=request.getContextPath()%&gt;/cpyAddArticle.do"</span>,</span><br><span class="line">        data:&#123;&#125;,</span><br><span class="line">        success:<span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123;</span><br><span class="line">            alert(msg);</span><br><span class="line">            location.reload();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 总结 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 项目总结 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[editor.md 富文本编辑器的使用]]></title>
      <url>/2018/01/30/summary03/</url>
      <content type="html"><![CDATA[<p>editormd 是一款国产的软件，虽然很久没更新了，但其所实现的功能已满足日常使用，下面主要讲使用时需要注意的点。<br><a id="more"></a><br>在 Body 中写两个文本域便于保存,注意 class<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"articlemd"</span> <span class="attr">style</span>=<span class="string">"margin-top: 10px"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">class</span>=<span class="string">"editormd-markdown-textarea"</span> <span class="attr">name</span>=<span class="string">"content"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 第二个隐藏文本域，用来构造生成的HTML代码，方便表单POST提交，这里的name可以任意取，后台接受时以这个name键为准 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">class</span>=<span class="string">"editormd-html-textarea"</span> <span class="attr">name</span>=<span class="string">"editorhtml"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>在取编辑器中的几行内容是用到的是下面的 JavaScript 方法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> summary = testEditor.setSelection(&#123;<span class="attr">line</span>: <span class="number">0</span>, <span class="attr">ch</span>: <span class="number">0</span>&#125;, &#123;<span class="attr">line</span>: <span class="number">4</span>, <span class="attr">ch</span>: <span class="number">100</span>&#125;);</span><br><span class="line">summary.getSelection();</span><br></pre></td></tr></table></figure></p>
<p>取得编辑器中所有的内容，以便保存到数据库中，注意数据库最好保存的是 Markdown 格式的。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> content = testEditor.getMarkdown();</span><br></pre></td></tr></table></figure>
<p>在前台显示数据时，调用解析器如下，注意ID值要和 JavaScript 代码对应<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"blog_content"</span> id=<span class="string">"content"</span>&gt;</span><br><span class="line"></span><br><span class="line">           &lt;textarea style=<span class="string">"display:none;"</span> name=<span class="string">"editormd-markdown-doc"</span>&gt; $&#123;blog.content&#125;&lt;<span class="regexp">/textarea&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> wordsView;</span><br><span class="line">    wordsView = editormd.markdownToHTML(<span class="string">"content"</span>, &#123;</span><br><span class="line">        htmlDecode: <span class="string">"style,script,iframe"</span>,  <span class="comment">// you can filter tags decode</span></span><br><span class="line">        emoji: <span class="literal">true</span>,</span><br><span class="line">        taskList: <span class="literal">true</span>,</span><br><span class="line">        tex: <span class="literal">true</span>,  <span class="comment">// 默认不解析</span></span><br><span class="line">        flowChart: <span class="literal">true</span>,  <span class="comment">// 默认不解析</span></span><br><span class="line">        sequenceDiagram: <span class="literal">true</span>,  <span class="comment">// 默认不解析</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p> 目前就这么多，想起来再补充。</p>
]]></content>
      
        <categories>
            
            <category> 总结 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 项目总结 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[项目总结 第一篇]]></title>
      <url>/2018/01/30/summary02/</url>
      <content type="html"><![CDATA[<p>在公司做一个商业的网站，里面有很多值得学习和保存的内容。</p>
<p>这次是在未提交表单时进行图片回显的JavaScript代码,很棒的效果。<br>以下仅显示用法<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">th</span>&gt;</span>封面图<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"easyui-filebox"</span> <span class="attr">style</span>=<span class="string">"width:300px;"</span> <span class="attr">data-options</span>=<span class="string">'onChange:change_photo'</span> <span class="attr">id</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file"</span> <span class="attr">buttonText</span>=<span class="string">'选择图片'</span> <span class="attr">value</span>=<span class="string">"$&#123;goods.thumb &#125;"</span>/&gt;</span></span><br><span class="line">     </span><br><span class="line">               <span class="comment">&lt;!-- &lt;input class="ipt" style="width:400px" name="thumb"  id="thumb" &gt; --&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">           </span><br><span class="line">           <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">th</span>&gt;</span>图片预览<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"Imgdiv"</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"Img"</span> <span class="attr">width</span>=<span class="string">"200px"</span> <span class="attr">height</span>=<span class="string">"200px"</span> <span class="attr">src</span>=<span class="string">"&lt;%=request.getContextPath()%&gt;$&#123;goods.thumb&#125;"</span>/&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">change_photo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    PreviewImage($(<span class="string">"input[name='file']"</span>)[<span class="number">0</span>], <span class="string">'Img'</span>, <span class="string">'Imgdiv'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">PreviewImage</span>(<span class="params">fileObj,imgPreviewId,divPreviewId</span>)</span>&#123;    </span><br><span class="line">    <span class="keyword">var</span> allowExtention=<span class="string">".jpg,.bmp,.gif,.png"</span>;<span class="comment">//允许上传文件的后缀名document.getElementById("hfAllowPicSuffix").value;    </span></span><br><span class="line">    <span class="keyword">var</span> extention=fileObj.value.substring(fileObj.value.lastIndexOf(<span class="string">"."</span>)+<span class="number">1</span>).toLowerCase();                </span><br><span class="line">    <span class="keyword">var</span> browserVersion= <span class="built_in">window</span>.navigator.userAgent.toUpperCase();    </span><br><span class="line">    <span class="keyword">if</span>(allowExtention.indexOf(extention)&gt;<span class="number">-1</span>)&#123;     </span><br><span class="line">        <span class="keyword">if</span>(fileObj.files)&#123;<span class="comment">//HTML5实现预览，兼容chrome、火狐7+等    </span></span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">window</span>.FileReader)&#123;    </span><br><span class="line">                <span class="keyword">var</span> reader = <span class="keyword">new</span> FileReader();     </span><br><span class="line">                reader.onload = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;    </span><br><span class="line">                    <span class="built_in">document</span>.getElementById(imgPreviewId).setAttribute(<span class="string">"src"</span>,e.target.result);    </span><br><span class="line">                &#125;      </span><br><span class="line">                reader.readAsDataURL(fileObj.files[<span class="number">0</span>]);    </span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(browserVersion.indexOf(<span class="string">"SAFARI"</span>)&gt;<span class="number">-1</span>)&#123;    </span><br><span class="line">                alert(<span class="string">"不支持Safari6.0以下浏览器的图片预览!"</span>);    </span><br><span class="line">            &#125;    </span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (browserVersion.indexOf(<span class="string">"MSIE"</span>)&gt;<span class="number">-1</span>)&#123;    </span><br><span class="line">            <span class="keyword">if</span>(browserVersion.indexOf(<span class="string">"MSIE 6"</span>)&gt;<span class="number">-1</span>)&#123;<span class="comment">//ie6    </span></span><br><span class="line">                <span class="built_in">document</span>.getElementById(imgPreviewId).setAttribute(<span class="string">"src"</span>,fileObj.value);    </span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;<span class="comment">//ie[7-9]    </span></span><br><span class="line">                fileObj.select();    </span><br><span class="line">                <span class="keyword">if</span>(browserVersion.indexOf(<span class="string">"MSIE 9"</span>)&gt;<span class="number">-1</span>)    </span><br><span class="line">                    fileObj.blur();<span class="comment">//不加上document.selection.createRange().text在ie9会拒绝访问    </span></span><br><span class="line">                <span class="keyword">var</span> newPreview =<span class="built_in">document</span>.getElementById(divPreviewId+<span class="string">"New"</span>);    </span><br><span class="line">                <span class="keyword">if</span>(newPreview==<span class="literal">null</span>)&#123;    </span><br><span class="line">                    newPreview =<span class="built_in">document</span>.createElement(<span class="string">"div"</span>);    </span><br><span class="line">                    newPreview.setAttribute(<span class="string">"id"</span>,divPreviewId+<span class="string">"New"</span>);    </span><br><span class="line">                    newPreview.style.width = <span class="built_in">document</span>.getElementById(imgPreviewId).width+<span class="string">"px"</span>;    </span><br><span class="line">                    newPreview.style.height = <span class="built_in">document</span>.getElementById(imgPreviewId).height+<span class="string">"px"</span>;    </span><br><span class="line">                    newPreview.style.border=<span class="string">"solid 1px #d2e2e2"</span>;    </span><br><span class="line">                &#125;    </span><br><span class="line">                newPreview.style.filter=<span class="string">"progid:DXImageTransform.Microsoft.AlphaImageLoader(sizingMethod='scale',src='"</span> + <span class="built_in">document</span>.selection.createRange().text + <span class="string">"')"</span>;                                </span><br><span class="line">                <span class="keyword">var</span> tempDivPreview=<span class="built_in">document</span>.getElementById(divPreviewId);    </span><br><span class="line">                tempDivPreview.parentNode.insertBefore(newPreview,tempDivPreview);    </span><br><span class="line">                tempDivPreview.style.display=<span class="string">"none"</span>;                        </span><br><span class="line">            &#125;    </span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(browserVersion.indexOf(<span class="string">"FIREFOX"</span>)&gt;<span class="number">-1</span>)&#123;<span class="comment">//firefox    </span></span><br><span class="line">            <span class="keyword">var</span> firefoxVersion= <span class="built_in">parseFloat</span>(browserVersion.toLowerCase().match(<span class="regexp">/firefox\/([\d.]+)/</span>)[<span class="number">1</span>]);    </span><br><span class="line">            <span class="keyword">if</span>(firefoxVersion&lt;<span class="number">7</span>)&#123;<span class="comment">//firefox7以下版本    </span></span><br><span class="line">                <span class="built_in">document</span>.getElementById(imgPreviewId).setAttribute(<span class="string">"src"</span>,fileObj.files[<span class="number">0</span>].getAsDataURL());    </span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;<span class="comment">//firefox7.0+                        </span></span><br><span class="line">                <span class="built_in">document</span>.getElementById(imgPreviewId).setAttribute(<span class="string">"src"</span>,<span class="built_in">window</span>.URL.createObjectURL(fileObj.files[<span class="number">0</span>]));    </span><br><span class="line">            &#125;    </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;    </span><br><span class="line">            <span class="built_in">document</span>.getElementById(imgPreviewId).setAttribute(<span class="string">"src"</span>,fileObj.value);    </span><br><span class="line">        &#125;             </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;    </span><br><span class="line">        alert(<span class="string">"仅支持"</span>+allowExtention+<span class="string">"为后缀名的文件!"</span>);    </span><br><span class="line">        fileObj.value=<span class="string">""</span>;<span class="comment">//清空选中文件    </span></span><br><span class="line">        <span class="keyword">if</span>(browserVersion.indexOf(<span class="string">"MSIE"</span>)&gt;<span class="number">-1</span>)&#123;                            </span><br><span class="line">            fileObj.select();    </span><br><span class="line">            <span class="built_in">document</span>.selection.clear();    </span><br><span class="line">        &#125;                    </span><br><span class="line">        fileObj.outerHTML=fileObj.outerHTML;    </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 总结 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 项目总结 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[2017至今总结]]></title>
      <url>/2018/01/29/summary01/</url>
      <content type="html"><![CDATA[<p>2017 年过去快一个月了，今天刚好想整理一下记录。捋一捋去年都干了些什么。</p>
<p>2018年给我的感觉就是冷，连南方都在下雪，而在今年我也即将毕业，走向社会，这个寒假在和老师在一个初创公司做网站，学到了不少知识。</p>
<p>2017 年，就像是梦幻般的一年，人工智能、大数据、云计算等兴起，以及比特币的水涨船高，还有接近年末的时候区块链的兴起，web3.0 时代即将来临。</p>
<p>我呢，说实话去年，低迷了很长一段时间，无心学习，连游戏也没心情玩，我也迷茫过一段时间，技术菜鸟该何去何从，马马虎虎，自以为是。在大学里我尊敬两位老师，一位是冯老师，专心钻研技术，管他娘的什么招生开会，他很有才，现在应该在清华读博吧。还有一位就是现在带着我一起做项目的老师，嗯，老油条，二十多年的经验可不是白混的，他对外称我是他的得意学生。虽然我很菜，但是老师一直在鼓励我，所以在公司里的前几天只能靠别人带领，到现在已经能够独立去思考问题，可以说这次机会真的可能是我人生中的转折点，还有一点需要提醒的是，要和老师搞好关系。</p>
<p>2018 这一年说说展望吧，去北京，上海，找一家大公司去上班，小公司真的是没有前途的，未来还有很多事情需要完成，不能在小公司里坐着增删改查，挣点小钱。我需要时间，三年，出来自己创业，趁着年轻多去经历。</p>
<p>最近一直在忙公司的项目，很少看博客，也很少写博客，这个算是一个熟悉，找感觉的过程，未来我还会努力的。</p>
]]></content>
      
        <categories>
            
            <category> 总结 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 年终总结 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[谈谈微服务]]></title>
      <url>/2017/11/25/microservice1/</url>
      <content type="html"><![CDATA[<h3 id="什么是微服务"><a href="#什么是微服务" class="headerlink" title="什么是微服务"></a>什么是微服务</h3><blockquote>
<p>微服务是一些协同工作的小而自治的服务。</p>
</blockquote>
<h3 id="发展历史"><a href="#发展历史" class="headerlink" title="发展历史"></a>发展历史</h3><p>微服务是应运而生，它不是谁发明的，而是现实社会总结出来的一种模式。</p>
<h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><p>我们可以把微服务看成一种细粒度的架构。当我们参与大型项目构建时会考虑到使用模块化的思想尽可能减少模块间的依赖，但这些模块间的界限很难维护，模块间相似的代码会有很多，这就增加了修复bug的难度。<br>在单一系统内，通常会创建一些抽象层或者模块来保证代码的内聚性，从而避免这个问题。内聚性是指将相关代码放在一起。内聚性在微服务架构里占有非常重要的地位。<br>微服务将这个理念应用到独立服务器上，根据业务的边界来确定服务的边界，这样就能确定某个功能放哪里。<br>微服务很小，专注于做好一件事<br>自治性：一个为服务就是一个独立的实体。他可以独立的部署在PAAS(Platform As A Service ，平台及服务)上，亦可以作为一个操作系统进程存在。<br>服务会暴露出API（Application Programming Interface，应用编程接口），然后服务之间通过这些API进行通信</p>
<h3 id="好处："><a href="#好处：" class="headerlink" title="好处："></a>好处：</h3><ul>
<li>技术异构型：我们可以使用多种语言来编写程序，只需要保持相同API即可。</li>
<li>弹性：当一个组件不可用时并不会导致级联故障。</li>
<li>扩展：以前一整套系统只能被当做一个整体来进行扩展，需要花费大量的时间精力去进行整个系统的代码修改，在使用微服务的系统里，我们只需要对想扩展的那个服务进行扩展</li>
<li>简化部署：使用微服务架构的系统不会像原来那样，每次更新都需要把整个项目重新部署一次，因为此时每个服务都是独立的，我们只需要把修改过代码的服务部署上去即可，有问题也只是这单个的服务，我们可以进行快速发现以及回滚。</li>
<li>与组织结构相匹配：一个团队或者小组专门负责一个服务，维护一个代码库。</li>
<li>可组合性：我们应该做到每个服务都是可重复使用的，根据客户需求对不同服务进行拼接组装。</li>
<li>可替代性的优化：当你进入一个公司时，可能要面临重构上任程序员留下来的系统，很有可能让你眼花缭乱心惊胆战。当使用微服务时，每个服务只有很少的代码，重写或者移除一个或者多个服务也变得容易。</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 架构 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 微服务 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[单例模式]]></title>
      <url>/2017/10/09/design-pattern/</url>
      <content type="html"><![CDATA[<p>单例模式Singleton<br>作用：保证整个应用程序中某个实例有且只有一个<br>类型：饿汉模式和懒汉模式</p>
<p>首先创建一个Pattern类，什么都不写。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.richmanroad.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pattern</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>再新建一个测试Test类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.richmanroad.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    Pattern pt1=<span class="keyword">new</span> Pattern();</span><br><span class="line">    Pattern pt2=<span class="keyword">new</span> Pattern();</span><br><span class="line">    Pattern pt3=<span class="keyword">new</span> Pattern();</span><br><span class="line">    System.out.println(pt1);</span><br><span class="line">    System.out.println(pt2);</span><br><span class="line">    System.out.println(pt3);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>控制台输出结果<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">top.richmanroad.demo.Pattern@<span class="number">15</span>db9742</span><br><span class="line">top.richmanroad.demo.Pattern@<span class="number">6</span>d06d69c</span><br><span class="line">top.richmanroad.demo.Pattern@<span class="number">7852e922</span></span><br></pre></td></tr></table></figure></p>
<p>可以看出其三次输出的地址不相同，说明此时创建了三个不同的实例</p>
<h2 id="饿汉模式"><a href="#饿汉模式" class="headerlink" title="饿汉模式"></a>饿汉模式</h2><p>将构造方法私有化，不能被外部直接创建对象，此时在Test类中就不能直接实例化对象了，然后在Pattern类中创建唯一的实例，并且将其变为类的成员(static将方法变为类所有),这样在Test类中可以直接使用；类名.成员名来获取对象。此时Pattern类如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.richmanroad.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pattern</span> </span>&#123;</span><br><span class="line"><span class="comment">//将构造方法私有化，不能被外部直接创建对象</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Pattern</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="comment">//创建类的唯一实例</span></span><br><span class="line">    <span class="keyword">static</span> Pattern instance=<span class="keyword">new</span> Pattern();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Test类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.richmanroad.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    Pattern pt1=Pattern.instance;</span><br><span class="line">    Pattern pt2=Pattern.instance;</span><br><span class="line">    Pattern pt3=Pattern.instance;</span><br><span class="line">    System.out.println(pt1);</span><br><span class="line">    System.out.println(pt2);</span><br><span class="line">    System.out.println(pt3);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>控制台输出结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">top.richmanroad.demo.Pattern@<span class="number">15</span>db9742</span><br><span class="line">top.richmanroad.demo.Pattern@<span class="number">15</span>db9742</span><br><span class="line">top.richmanroad.demo.Pattern@<span class="number">15</span>db9742</span><br></pre></td></tr></table></figure></p>
<p>可以看出三者的地址指向一处，说明此时只创建了一个实例。</p>
<p>接下来为了安全，需要将对Pattern类进行封装(面向对象思想)，此时我们的Pattern类就变成了如下内容<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.richmanroad.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pattern</span> </span>&#123;</span><br><span class="line"><span class="comment">//将构造方法私有化，不能被外部直接创建对象</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Pattern</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="comment">//创建类的唯一实例</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> Pattern instance=<span class="keyword">new</span> Pattern();</span><br><span class="line"><span class="comment">//提供一个用于获取实例的方法</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Pattern <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">     <span class="keyword">return</span> instance;</span><br><span class="line"> &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Test类修改内容并输出，结果同上<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Pattern pt1=Pattern.getInstance();</span><br></pre></td></tr></table></figure></p>
<p>上面这种方法为饿汉模式，意思大致为:static为静态修饰符，当Pattern类加载时它就会创建一个唯一的实例，不管后面有没有调用，都随类一起产生。</p>
<h2 id="懒汉模式"><a href="#懒汉模式" class="headerlink" title="懒汉模式"></a>懒汉模式</h2><p>LazyPattern类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.richmanroad.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LazyPattern</span> </span>&#123;</span><br><span class="line">    <span class="comment">//构造方法私有化</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">LazyPattern</span><span class="params">()</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//声明类的唯一实例，使用private修饰</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> LazyPattern instance;</span><br><span class="line"><span class="comment">//提供一个用于获取实例的方法，使用public static修饰</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LazyPattern <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(instance==<span class="keyword">null</span>)&#123;</span><br><span class="line">        instance=<span class="keyword">new</span> LazyPattern();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>类中只是声明了一个唯一的实例，并没有创建，只有当用户获取实例时才去判断这个实例是否为空</p>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">饿汉模式</th>
<th style="text-align:center">懒汉模式</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">区别</td>
<td style="text-align:center">加载时速度慢，运行时获取对象比较快</td>
<td style="text-align:center">加载速度快，运行时获取对象速度比较慢</td>
</tr>
<tr>
<td style="text-align:center">线程</td>
<td style="text-align:center">安全</td>
<td style="text-align:center">不安全</td>
</tr>
</tbody>
</table>
]]></content>
      
        <categories>
            
            <category> 架构 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[tor 使用]]></title>
      <url>/2017/09/16/web-1/</url>
      <content type="html"><![CDATA[<h1 id="写在前面："><a href="#写在前面：" class="headerlink" title="写在前面："></a>写在前面：</h1><p>我写本文的目的是为了记录我所探索的世界，严禁做违法犯罪的事情，作者一直保持中立态度来学习。望来者自尊自律。<br>如果你只是为了翻墙，此文不适合你，我有更快的方式交给你如何使用代理。  </p>
<a id="more"></a>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p> 1.从<a href="https://www.torproject.org/projects/torbrowser.html.en" target="_blank" rel="noopener">Tor官网</a>下载Tor并安装<br> 2.运行Tor<br> 3.你可以先尝试直接连接，如果等5分钟还没有好那就进行下一步<br> 4.配置网桥连接方式，ISP对Tor进行了封锁选是“是”<br> 5.Tor网桥配置，优先使用集成好的网桥连接，先试用传输类型为“meek-amazon”的网桥”，点击下一步，不适用本地代理。如果能连上你只需要等4——7分钟，否则就按此步方法更改网桥。<br> 6.当你成功连接上Tor后，它会自动弹出Tor浏览器，如下<br><img src="http://image.younge.group/tor1.png" alt><br>  ===================配置篇完===================</p>
<h2 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h2><p>  1.搜索引擎使用NotEvil,只提供一个常用的<br>  <img src="http://image.younge.group/tor2.png" alt><br>  2.搜索栏键入“论坛”，你会看到有很多中文论坛，加入进去<br>  ===================搜索篇完===================  </p>
<h2 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h2><p>  1.当你连上了Tor以后应该在本机使用全局代理，防止IP追踪<br>  2.尽量避免在Tor上下载大文件，持续的高流量一定会引起有关部门的关注<br>  3.一定不要留下真实的信息，因为你不知道暗网上都是些什么人<br>  ===================END===================</p>
]]></content>
      
        <categories>
            
            <category> 架构 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> tor </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[总结]]></title>
      <url>/2017/05/18/summary/</url>
      <content type="html"><![CDATA[<p>两天时间基本建成本博客，留言插件因为多说关闭，Disqus被墙不能加载而以失败告终，经历了很多坎坷。</p>
<h2 id="首先"><a href="#首先" class="headerlink" title="首先"></a>首先</h2><p>在<a href="https://www.aliyun.com" target="_blank" rel="noopener">阿里云</a>购买域名（如果你不想花钱的话用GitHubPage的默认域名也行），云解析，服务器不需要买然后解析：先用命令行Ping到你yourname.github.io得到ip，添加到云解析的IP地址中去(‘@’的意思是将你的域名映射到github服务器上)ok域名问题解决。</p>
<h2 id="接下来"><a href="#接下来" class="headerlink" title="接下来"></a>接下来</h2><p>你需要下载<a href="https://nodejs.org" target="_blank" rel="noopener">nodejs</a>和<a href="https://git-scm.com" target="_blank" rel="noopener">git</a>.安装过程略。安装完后测试npm -v;git –version,如果显示出版本号那么你就可以进行下一步了。<br><a id="more"></a></p>
<h2 id="下一步"><a href="#下一步" class="headerlink" title="下一步"></a>下一步</h2><p><a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener">hexo官方手册中文版</a> 你会需要它的，基金本上所有的建站流程都有了下面说说语法 安装hexo，详情参考官方手册<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli </span><br><span class="line">hexo clean <span class="comment">#清除缓存</span></span><br><span class="line">hexo g <span class="comment">#编译文件</span></span><br><span class="line">hexo s <span class="comment">#上传本地服务器localhost:4000</span></span><br><span class="line">hexo d <span class="comment">#部署到GitHub</span></span><br></pre></td></tr></table></figure></p>
<p>部署前需要安装插件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></p>
<p>关于‘主题’手册中也说的比较明确，如果看不懂可到文末查看更多作者的经验。<br>博客上传图片问题<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#hexo目录下执行语句</span></span><br><span class="line">npm install https://github.com/CodeFalling/hexo-asset-image --save</span><br></pre></td></tr></table></figure></p>
<p>详请参见文末链接<br>关于<a href="https://tongji.baidu.com/" target="_blank" rel="noopener">百度分析</a>，<a href="https://analytics.google.com" target="_blank" rel="noopener">谷歌分析</a>一般主题里都会设置，详请参见文末链接。</p>
<p>关于图片问题，调用图片时不能用,你可以将图片上传到图床，推荐使用七牛云，稳定，至少能够长期使用。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![服务器资源图片](hello/11.jpg)</span><br></pre></td></tr></table></figure></p>
<p><img src="hello/11.jpg" alt="服务器资源图片"><br>如果使用本地图片要改成<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;%asset_img 11.jpg 本地资源%&#125;</span><br></pre></td></tr></table></figure></p>
<p>才能正常显示,图片如下<br><br>关于<a href="http://www.jiathis.com/" target="_blank" rel="noopener">jiaThis</a>自己去看。<br>config里的东西很重要，知道是什么再改。<br>头像问题我会在另一篇文中写。</p>
<h2 id="友情链接"><a href="#友情链接" class="headerlink" title="友情链接"></a>友情链接</h2><p>  <a href="http://hanhailong.com/2015/10/08/Hexo%E2%80%94%E6%B7%BB%E5%8A%A0%E7%99%BE%E5%BA%A6%E7%BB%9F%E8%AE%A1%E4%BB%A3%E7%A0%81/" target="_blank" rel="noopener">Hexo—添加百度统计代码</a><br>  <a href="https://samenyan.github.io/2016/03/19/Hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E6%B7%BB%E5%8A%A0%E5%9B%BE%E7%89%87%E3%80%81%E9%9F%B3%E4%B9%90%E3%80%81%E8%A7%86%E9%A2%91/" target="_blank" rel="noopener">Hexo博客中添加图片、音频、视频</a><br>  <a href="http://www.jianshu.com/p/05289a4bc8b2" target="_blank" rel="noopener">如何搭建一个独立博客</a><br>  <a href="http://www.jianshu.com/p/c2ba9533088a" target="_blank" rel="noopener">hexo博客图片问题</a><br>  <a href="https://ijiaober.github.io/2014/08/08/hexo/hexo-10/" target="_blank" rel="noopener">Hexo使用攻略（十）百度统计、收藏图标、友情链接</a><br>  <a href="http://www.jianshu.com/p/a52b68794a6b" target="_blank" rel="noopener">hexo创建个人博客</a><br>  <a href="https://ijiaober.github.io/categories/hexo/" target="_blank" rel="noopener">Hexo使用攻略</a><br>  <a href="http://www.wisedream.net/2016/01/08/tricks/hexo-custermize/" target="_blank" rel="noopener">Hexo折腾手记</a></p>
<h1 id="The-End"><a href="#The-End" class="headerlink" title="The End"></a>The End</h1>]]></content>
      
        <categories>
            
            <category> 总结 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 建站记录 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
